{"version":3,"sources":["assets/images/board/default_thumbnail.jpg","components/common/Header.tsx","components/common/Footer.tsx","modules/modal.ts","hooks/useModal.tsx","components/common/Modal.tsx","components/common/Login.tsx","components/home/Homepage.tsx","components/board/BoardList.tsx","components/board/BoardHome.tsx","components/board/BoardView.tsx","components/board/BoardWrite.tsx","components/common/TextEditor.tsx","components/board/BoardTest.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["module","exports","Header","mobileMenuRef","useRef","subMenuRef","toggleMainMenu","event","status","current","classList","remove","add","toggle","openSubMenu","document","body","addEventListener","bodyFunc","closeSubMenu","removeEventListener","e","console","log","srcElement","className","flag","forEach","val","index","baseVal","useMemo","window","onClick","to","contains","ref","Footer","CLOSE","initialState","title","desc","confirm","isShow","func","modal","state","action","type","payload","useModal","modalState","useSelector","dispatch","useDispatch","onOpenAlertModal","useCallback","data","openAlertModal","onOpenConfirmModal","openConfirmModal","onCloseModal","Modal","modalEl","useState","modalData","setModalData","useEffect","closeWindow","defaultProps","Login","email","password","userInfoState","setUserInfoState","modeState","setModeState","toggleBarRef","toggleModeState","useHistory","currentTarget","dataset","mode","setLoginState","target","name","value","onSubmit","preventDefault","axios","method","url","then","res","placeholder","onChange","data-mode","Homepage","BoardList","setTags","date","setDate","defaultThumbnail","thumbImg","setThumbImg","checkDate","toString","length","tags","images","thumbnailImage","path","resolve","filename","timeStamp","_id","substring","Date","parseInt","year","getUTCFullYear","month","getUTCMonth","day","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","dateForm","map","tag","key","writer","style","backgroundImage","BoardHome","boardList","setBoardList","tagFilter","querySelectorAll","list","targetTag","innerText","getListFromDB","filterdList","filter","indexOf","scrollTo","x","BoardView","match","description","descriptionImage","listData","setListData","thumbnailImageState","setThumbnailImageState","history","params","list_id","dangerouslySetInnerHTML","__html","push","BoardWrite","titleState","setTitleState","tagsState","setTagsState","idState","setIdState","imageState","setImageState","firstClickOfEditorState","setFirstClickOfEditorState","tempThumbnailImagePathState","setTempThumbnailImagePathState","thumbnailImageFileState","setThumbnailImageFileState","descriptionImageFilesState","setDescriptionImageFilesState","inputTagCountState","setInputTagCountState","iframeRef","optionsRef","thumbImageRef","titleInputRef","focusOnTextEditor","contentDocument","focus","sendOptionToTextEditor","exec","toggleButtonStatus","execCommand","applyOptionOnTextEditor","clickAndKeyUpEventOfTextEditor","clearTextOnTextEditor","childNodes","cmd","queryCommandState","image","innerHTML","item","i","file","fontSizeRef","setContentsOnPage","id","text","setTagsOnViewByData","designMode","head","fontFamily","fontWeight","margin","setDefaultOnTextEditor","listId","addEventOnTextEditor","removeEventOnTextEditor","contentWindow","getTextEditorContents","stringData","setFormData","form","FormData","append","JSON","stringify","replace","getTextEditorContentsAfterRemoveTempImgSrc","setTagsData","concat","initTags","span","setTempThumbnailImageOnView","thumbImageFile","reader","FileReader","onload","result","readAsDataURL","verifyImageType","setDescriptionImageFile","files","imageFile","setTempDescriptImageOnTextEditor","descriptionImageFile","imageTag","targets","passFlag","some","nullCheckData","headers","Array","v","data-cmd","setTimeout","querySelector","click","TextEditor","BoardTest","marginTop","App","exact","component","Boolean","location","hostname","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.894432eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default_thumbnail.08a1cc29.jpg\";","import React, {useRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport {BiMenu, BiUser} from 'react-icons/bi';\nimport './Header.scss';\n\nfunction Header(){\n\n    const mobileMenuRef = useRef<HTMLUListElement>(null);\n    const subMenuRef = useRef<HTMLDivElement>(null);\n\n\n    // MainMenu 모바일에서 메뉴 펄치기 버튼\n    const toggleMainMenu = (event: any , status: Number = 2) =>{\n        if(mobileMenuRef.current){\n            switch(status){\n                case 0: // close\n                    mobileMenuRef.current.classList.remove('on');\n                    break;\n                case 1: // open\n                    mobileMenuRef.current.classList.add('on');\n                    break;\n                case 2: // toggle\n                    mobileMenuRef.current.classList.toggle('on');\n                    break;\n            }\n        }           \n    }\n    // SubMenu 데스크탑/모바일 마이페이지 아이콘 버튼\n    const toggleSubMenu = () =>{\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            // console.log('classList', classList);\n            if(classList.contains('on')){\n                closeSubMenu();\n            }else{\n                openSubMenu();\n            }\n        }\n    }\n\n    const openSubMenu = () =>{\n        // console.log(\"openSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.add('on');\n            document.body.addEventListener('click', bodyFunc);\n        }\n    }\n\n    const closeSubMenu = () =>{\n        // console.log(\"closeSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.remove('on');\n            document.body.removeEventListener('click', bodyFunc);\n        }\n    }\n\n    const bodyFunc = (e: any) =>{\n        console.log('bodyevent 실행', e.srcElement.className);\n        const exClassName = [\n            'bb-header__sub-menu-box-ul',\n            'bb-header__sub-menu-box-li'\n        ];\n        let flag = true;\n\n\n        exClassName.forEach((val, index)=>{\n            if(e.srcElement.className === val || e.srcElement.className.baseVal === 'icon-user'){\n                flag = false;\n            }\n        });\n\n        if(flag){\n            closeSubMenu();\n        }\n    }\n\n    useMemo(()=>{\n        window.addEventListener('resize', ()=>{\n            mobileMenuRef.current?.classList.remove('on');\n            subMenuRef.current?.classList.remove('on');\n        });\n    }, []);\n\n    return (\n        <nav className=\"bb-header__nav\">\n            <div className=\"bb-header__menu--desktop\">\n                <div className=\"bb-header__mobile-menu-btn\" onClick={(e) => toggleMainMenu(e, 2)}><BiMenu className=\"icon-menu\" /></div>\n                <div className=\"bb-header__logo-btn\" onClick={(e) => toggleMainMenu(e, 0)}><Link className=\"text-black \" to=\"/\">Bumblog</Link></div>\n                <div className=\"bb-header__desktop-menu-wrapper\">\n                    <ul className=\"bb-header__desktop-menu\">\n                      <li></li>\n                    </ul>\n                    <div className=\"bb-header__sub-menu\">\n                        <div className=\"bb-header__sub-menu-icon\" onClick={toggleSubMenu}><BiUser className=\"icon-user\" /></div>\n                        <div className=\"bb-header__sub-menu-box\" ref={subMenuRef}>\n                            <div className=\"edge-wrapper\">\n                                <div className=\"edge\"></div>\n                            </div>\n                            <ul className=\"bb-header__sub-menu-box-ul\">\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"bb-header__mobile-menu-wrapper\">\n                <ul className=\"bb-header__mobile-menu\" ref={mobileMenuRef}>\n                    <li onClick={(e) => toggleMainMenu(e, 0)}><Link to=\"/board\">MENU-1</Link></li>\n                    <li>MENU-2</li>\n                    <li>MENU-3</li>\n                    <li>MENU-4</li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer(){\n    return (\n        <footer className=\"bb-common__footer\">\n            <div className=\"bb-common__footer-contents-wrapper\">\n                <div className=\"bb-common__footer-copyright\">\n                    <div>Copyright © 2020 Bumblog Inc. All rights reserved</div>\n                </div>\n                <div className=\"text-bold\">Bumblog</div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","const OPEN_ALERT = 'modal/open' as const;\nconst OPEN_CONFIRM = 'modal/open_confirm' as const;\nconst CLOSE = 'modal/close' as const;\n\n\nexport type ModalDataType = {\n    status: boolean;\n    title: string;\n    desc: string;\n    confirm: {\n        isShow: boolean;\n        func?: () => void;\n    };\n}\n\nexport const openAlertModal = (data: ModalDataType) =>({\n    type: OPEN_ALERT,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: data.confirm.isShow,\n        }\n    }\n\n});\n\nexport const openConfirmModal = (data: ModalDataType) =>({\n    type: OPEN_CONFIRM,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: data.confirm.isShow,\n            func: data.confirm.func\n        }\n    }\n});\n\nexport const closeModal = () =>({\n    type: CLOSE\n})\n\ntype ModalAction = \n    | ReturnType<typeof openAlertModal>\n    | ReturnType<typeof openConfirmModal>\n    | ReturnType<typeof closeModal>\n\nconst initialState: ModalDataType = {\n    status: false,\n    title: '',\n    desc: '',\n    confirm: {\n        isShow: false,\n        func: () => {}\n    }\n}\n\nfunction modal(state: ModalDataType = initialState, action: ModalAction): ModalDataType{\n    switch(action.type){\n        case OPEN_ALERT:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                }\n            }\n        case OPEN_CONFIRM:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                    func: action.payload.confirm.func\n                }\n            }\n        case CLOSE:\n            return {\n                ...state,\n                status: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default modal;","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../modules';\nimport { openAlertModal, openConfirmModal, closeModal } from '../modules/modal';\nimport { useCallback } from 'react';\n\nfunction useModal(){\n    const modalState = useSelector((state:RootState) => state.modal);\n    const dispatch = useDispatch();\n\n    const onOpenAlertModal = useCallback((data)=>{\n        dispatch(openAlertModal(data));\n    }, [dispatch]);\n\n    const onOpenConfirmModal = useCallback((data)=>{\n        dispatch(openConfirmModal(data));\n    }, [dispatch]);\n\n    const onCloseModal = useCallback(()=>{\n        dispatch(closeModal());\n    }, [dispatch]);\n\n    return {\n        modalState,\n        onOpenAlertModal,\n        onOpenConfirmModal,\n        onCloseModal\n    }\n}\n\nexport default useModal;","import React, { useRef, useState, useEffect } from 'react';\nimport './Modal.scss';\nimport useModal from '../../hooks/useModal';\nimport {ModalDataType} from '../../modules/modal';\nimport {BsX} from 'react-icons/bs';\n\nfunction Modal({data} : {data: ModalDataType}){\n\n    const {modalState, onCloseModal} = useModal();\n    const modalEl = useRef<HTMLDivElement>(null);\n    const [modalData, setModalData] = useState<ModalDataType>(data);\n\n    useEffect(function(){\n        setModalData(modalState);\n    }, [modalState]);\n\n    const closeWindow = () =>{\n        onCloseModal();\n    }\n\n    return (\n        <div className={`bb-modal__body ${modalData.status && 'on'}`} ref={modalEl}>\n            <div className=\"bb-modal__dim\" onClick={closeWindow}></div>\n            <div className=\"bb-modal__window\">\n                <div className=\"bb-modal__window-close-btn\" onClick={closeWindow}><BsX className=\"bb-modal__window-corss-icon\" /></div>\n                <div>\n                    <h2 className=\"bb-modal__window-title\">{modalData.title}</h2>\n                    <div className=\"bb-modal__window-desc\">\n                        {modalData.desc}\n                    </div>\n                    <div className={`bb-modal__window-btns ${modalData.confirm.isShow && 'on'}`}>\n                        <button onClick={closeWindow}>아니오</button>\n                        <button onClick={modalData.confirm.func}>예</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nModal.defaultProps = {\n    data: {\n        status: false,\n        title: '',\n        desc: '',\n        confirm: {\n          isShow: false\n        }\n    }\n}\n\nexport default Modal;","import React, { useRef, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport './Login.scss';\nimport {useHistory} from 'react-router-dom';\n\nfunction Login(){\n\n    const [userInfoState, setUserInfoState] = useState({\n        email: '',\n        password: ''\n    });\n    const [modeState, setModeState] = useState('Login');\n    const toggleBarRef = useRef<HTMLSpanElement>(null);\n\n    let history = useHistory();\n\n    const toggleModeState = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) =>{\n        if(e.currentTarget.dataset.mode)\n            setModeState(e.currentTarget.dataset.mode);\n        toggleBarRef.current?.classList.toggle('on');\n    }\n\n    const setLoginState = (e: React.ChangeEvent<HTMLInputElement>) =>{\n\n        const {name, value} = e.target;\n\n        setUserInfoState({\n            ...userInfoState,\n            [name]: value \n        })\n    }\n\n\n\n\n    const onSubmitForLogin = (e: React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n\n        if(modeState === 'Login'){\n            axios({\n                method: 'post',\n                url: '/api/auth/login',\n                data: userInfoState\n            }).then((res) =>{\n                console.log('post_res', res.data);\n            });\n        }else{\n            axios({\n                method: 'post',\n                url: '/api/auth/user',\n                data: userInfoState\n            }).then((res) =>{\n                console.log('post_res', res.data);\n            });\n        }\n\n        \n    }\n\n    // Sign In 로그인\n    // Sign Up 가입\n    // Sign Out 로그아웃\n\n    return (\n        <main className=\"bb-login__main\">\n            <form className=\"bb-login__form\" onSubmit={onSubmitForLogin}>\n                <div className=\"bb-login__form-title\">\n                    <h2>Bumblog</h2>\n                </div>\n                <div className=\"bb-login__input-wrapper\">\n                    <input type=\"text\" name=\"email\" placeholder=\"E-Mail\" onChange={setLoginState} />\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\" onChange={setLoginState} />\n                </div>\n                <div className=\"bb-login__mode-toggle\">\n                    <span className=\"bb-login__toggle-bar\" ref={toggleBarRef}>{modeState}</span>\n                    <div data-mode=\"Login\" onClick={(e) => toggleModeState(e)}>Login</div>\n                    <div data-mode=\"Register\" onClick={(e) => toggleModeState(e)}>Register</div>\n                </div>\n                <button className=\"bb-login__submit-button\" type=\"submit\">{modeState}</button>\n            </form>\n        </main>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport {BiChevronRight} from 'react-icons/bi';\nimport './Homepage.scss';\nimport {Link} from 'react-router-dom';\n\nfunction Homepage(){\n    return (\n        <main className=\"bg-hp-main\">\n            <section>\n                <div className=\"bg-hp-hero\">\n                    <div className=\"bg-hp-copy-wrapper\">\n                        <div className=\"bg-hp-copy\">\n                            <h1>BeomGeun&nbsp;Shin</h1>\n                            <div className=\"text-medium text-grey\">Front-End Developer</div>\n                            <div className=\"bg-hp-desc\">\n                                <Link className=\"link\" to=\"/board\">이력서 보기<BiChevronRight className=\"icon-chevronright\" /></Link>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"bg-hp-hero-img-wrapper\">\n                        <figure className=\"bg-hp-hero-img\"></figure>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bg-hp-grid\">\n                <div className=\"bg-hp-grid-wrapper\">\n                    <ul className=\"bg-hp-table\">\n                        <li className=\"bg-hp-list merge-row bb-homme__site-intro\">\n                            <div className=\"bg-hp-banner\">\n                                <h1>사이트 소개</h1>\n                                <div>\n                                    본 사이트는 React, Redux, express, RESTful API, mongodb로 이루어져&nbsp;있습니다.\n                                </div>\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>이력서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>자기소개서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>경력기술서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                    </ul>   \n                </div>\n            </section>\n        </main>\n    )\n}\n\nexport default Homepage;","import React, { useEffect, useState } from 'react';\nimport {boardListType} from './BoardHome';\nimport {Link} from 'react-router-dom';\nimport path from 'path';\nimport './BoardList.scss';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\n\nfunction BoardList({data}: {data: boardListType}){\n\n    // console.log('data', data);\n\n    const [tags, setTags] = useState<string[]>([]);\n    const [date, setDate] = useState('');\n    const [thumbImg, setThumbImg] = useState(defaultThumbnail);\n\n    const dateForm = () =>{\n        const timeStamp = data._id.toString().substring(0,8);\n        const date = new Date(parseInt(timeStamp, 16) * 1000);\n\n        const year = date.getUTCFullYear(); // 2020\n        const month = checkDate(date.getUTCMonth());\n        const day = checkDate(date.getUTCDay());\n        const hour = checkDate(date.getUTCHours());\n        const minutes = checkDate(date.getUTCMinutes());\n        const seconds = checkDate(date.getUTCSeconds());\n\n        // return `${year}.${month}.${day} ${hour}:${minutes}:${seconds}`;\n        return `${year}.${month}.${day}`;\n    }\n\n    const checkDate = (date:number) =>{\n        if(date.toString().length === 1){\n            return \"0\" + date.toString();\n        }else{\n            return date.toString();\n        }\n    };\n\n    useEffect(()=>{\n        setTags(data.tags);\n\n        if(data.images.thumbnailImage.length > 0){\n            setThumbImg(path.resolve('./uploads', data.images.thumbnailImage[0].filename));\n        }\n\n        setDate(dateForm());\n    }, []);\n\n    return (\n            <li className=\"bb-board-list__body\">\n                <Link to={`/board/view/${data._id}`}>\n                    <div className=\"bb-board-list__contents-wrapper\">\n                        <div className=\"bb-board-list__article-wrapper\">\n                            <div>\n                                <div className=\"bb-board-list__article-title\">{data.title}</div>\n                                <div className=\"bb-board-list__article-tags\">\n                                    {data.tags.map((tag, index) => <span key={index}>{tag}</span>)}\n                                </div>\n                            </div>\n                            \n                            {/* <div className=\"bb-board-list__article-description\" dangerouslySetInnerHTML={{__html: data.description}}></div> */}\n                            <ul className=\"bb-board-list__article-extra-info\">\n                                <li>{date}</li>\n                                <li>{data.writer}</li>\n                            </ul>\n                        </div>\n                        <div>\n                            <figure className=\"bb-board-list__image\" style={{backgroundImage: `url(${thumbImg})`}}/>\n                        </div>\n                    </div>\n                </Link>\n            </li>\n        \n    )\n}\n\nexport default BoardList;","import React, { useEffect, useState } from 'react';\nimport './BoardHome.scss';\nimport BoardList from './BoardList';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport {BsPencilSquare} from 'react-icons/bs';\n\nexport type boardListType = {\n    _id: string;\n    tags: string[];\n    title: string;\n    description: string;\n    writer: string;\n    images: boardListImagesType;\n}\n\nexport type boardListImagesType = {\n    thumbnailImage: {\n        originalname: string;\n        filename: string;\n    }[];\n    descriptionImage: {\n        originalname: string;\n        filename: string;\n    }[];\n}\n\n\nfunction BoardHome(){\n\n    const [boardList, setBoardList] = useState<boardListType[]>([]);\n    const tagFilter = (e:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n\n        // 버튼 초기화\n        document.querySelectorAll('.bb-board-home__tags-ul > li').forEach((list)=>{\n            list.classList.remove('on');\n        });\n\n        // 버튼 표시\n        e.currentTarget.classList.add('on');\n\n        // 데이터 불러오고 => 필터 적용\n        const targetTag = e.currentTarget.innerText;\n\n        getListFromDB().then((res) => {\n            if(targetTag === '모두'){\n                setBoardList(res.data)\n            }else{\n                const filterdList = res.data.filter((list:boardListType) => list.tags.indexOf(targetTag) !== -1);\n                setBoardList(filterdList);\n            }\n        });\n    }\n\n    const getListFromDB = () =>{\n        return axios({\n            method: 'get',\n            url: '/api/board/list'\n        });\n    }\n\n    useEffect(()=>{\n        getListFromDB().then((res) =>{\n            setBoardList(res.data);\n        });\n\n        window.scrollTo(0, 0);\n    }, []);\n\n\n    return (\n        <main className=\"bb-board-home__main\">\n            <section className=\"bb-board-home__hero-section\">\n                <div>\n                    <h1>Bumblog</h1>\n                    <div className=\"bb-board-home__hero-desc\">\n                        생각나는 것을 기록하고 저장하는 공간\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__tags-section\">\n                <div>\n                    <ul className=\"bb-board-home__tags-ul\">\n                        <li className=\"on\" onClick={tagFilter}>모두</li>\n                        <li onClick={tagFilter}>개발</li>\n                        <li onClick={tagFilter}>공부</li>\n                        <li onClick={tagFilter}>생각</li>\n                    </ul>\n                </div>\n            </section>\n            <section className=\"bb-board-home__write-button-section\">\n                <div className=\"bb-board-home__btns-wrapper\">\n                    <div>&nbsp;</div>\n                    <div>\n                        <Link className=\"bb-board-home__icon-wrapper\" to=\"/board/write\">\n                            <BsPencilSquare className=\"bb-board-home__write-icon\" />&nbsp;글쓰기\n                        </Link>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__list-section\">\n                <ul className=\"bb-board-home__list-ul-tag\">\n                    {boardList.map(x => <BoardList key={x._id} data={x} />)}\n                </ul>\n            </section>\n            \n        </main>\n    )\n}\n\nexport default BoardHome;","import React, { useEffect, useState } from 'react';\nimport {Link, match} from 'react-router-dom';\nimport './BoardView.scss';\nimport axios from 'axios';\nimport {boardListType} from './BoardHome';\nimport {useHistory} from 'react-router-dom';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\nimport {BsPencilSquare, BsTrash} from 'react-icons/bs'\nimport path from 'path';\nimport useModal from '../../hooks/useModal';\nimport {matchType} from '../../App';\n\n\nfunction BoardView({match}: {match: match<matchType>}){\n\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const [listData, setListData] = useState<boardListType>({\n        _id: '',\n        tags: [],\n        title: '',\n        description: '',\n        writer: '',\n        images: {\n            thumbnailImage: [],\n            descriptionImage: []\n        }\n    });\n\n    const [thumbnailImageState, setThumbnailImageState] = useState('');\n    let history = useHistory();\n    \n    useEffect(()=>{\n\n        window.scrollTo(0, 0);\n       \n        axios({\n            method: 'get',\n            url: `/api/board/list/${match.params.list_id}`\n        }).then((res) =>{\n\n            if(res.data){\n\n                setListData(res.data);\n                const thumbnailImage = res.data.images.thumbnailImage[0];\n\n                if(thumbnailImage){\n                    setThumbnailImageState(path.resolve('./uploads', thumbnailImage.filename));\n                }else{\n                    setThumbnailImageState(defaultThumbnail);   \n                }\n                \n            }\n        });\n    }, []);\n\n\n    const handleDelete = () =>{\n        onOpenConfirmModal({\n            status: true,\n            title: '정말 삭제하시겠습니까?',\n            desc: '삭제한 데이터는 복원할 수 없습니다.',\n            confirm: {\n                isShow: true,\n                func: () => {\n                    axios({\n                        method: 'delete',\n                        url: '/api/board/list',\n                        data: listData\n                    }).then((res) =>{\n                        console.log('deleteRes', res.data);\n                        onCloseModal();\n                        history.push('/board');\n                    });\n                }\n            }\n        });   \n    }\n\n\n    return (\n        <main className=\"bb-board-view__main\">\n            <section className=\"bb-board-view__hero-section\" style={{backgroundImage: `url(${thumbnailImageState})`}}>\n                <div className=\"bb-board-view__hero-section-title-wrapper\">\n                    <h1>{listData?.title}</h1>\n                    <div className=\"bb-board-view__subtitle\">\n                        {/* {listData?.subTitle} */}\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-view__article-section\">\n                <article className=\"bb-board-view__article tui-editor-contents\" dangerouslySetInnerHTML={{__html: listData.description}}></article>\n            </section>\n            <section className=\"bb-board-view__buttons-section\">\n                <ul className=\"bb-board-view__update-btns\">\n                    <li>\n                        <button>\n                            <Link to={`/board/write/${match.params.list_id}`}>\n                                <BsPencilSquare className=\"bb-board-view__pencil-icon\" />\n                            </Link>\n                        </button>\n                    </li>\n                    <li>\n                        <button onClick={handleDelete}>\n                            <BsTrash className=\"bb-board-view__tresh-icon\" />\n                        </button>\n                    </li>\n                </ul>\n            </section>\n        </main>\n    );\n}\n\nexport default BoardView;","import React, { useRef, useState, useEffect, createElement } from 'react';\nimport axios from 'axios';\n\nimport './BoardWrite.scss';\nimport path from 'path';\nimport {match, useHistory} from 'react-router-dom';\nimport useModal from '../../hooks/useModal';\n\nimport {\n    BsTypeBold, \n    BsTypeItalic,\n    BsTypeUnderline,\n    BsTypeStrikethrough,\n    BsListUl,\n    BsListOl,\n    BsTextIndentLeft,\n    BsTextIndentRight,\n    BsTextCenter,\n    BsX,\n    BsCardImage\n} from 'react-icons/bs';\nimport {VscTextSize} from 'react-icons/vsc';\nimport { boardListType, boardListImagesType } from './BoardHome';\nimport {matchType} from '../../App';\n\n\nfunction BoardWrite({match}: {match: match<matchType>}){\n\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const [titleState, setTitleState] = useState('')\n    const [tagsState, setTagsState] = useState<string[]>([]);\n    const [idState, setIdState] = useState('');\n    const [imageState, setImageState] = useState<boardListImagesType>({\n        thumbnailImage: [],\n        descriptionImage:[]\n    });\n    const [firstClickOfEditorState, setFirstClickOfEditorState] = useState(true);\n\n    const [tempThumbnailImagePathState, setTempThumbnailImagePathState] = useState('');\n    const [thumbnailImageFileState, setThumbnailImageFileState] = useState<File | null>(null); \n    const [descriptionImageFilesState, setDescriptionImageFilesState] = useState<(File | null)[] | null>(null);\n\n    const [inputTagCountState, setInputTagCountState] = useState(0);\n\n    let history = useHistory();\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const optionsRef = useRef<HTMLUListElement>(null);\n    const thumbImageRef = useRef<HTMLInputElement>(null);\n    const titleInputRef = useRef<HTMLInputElement>(null);\n\n\n    const toggleButtonStatus = (event:React.MouseEvent<HTMLLIElement, MouseEvent> | undefined) =>{\n        if(event){\n            event.currentTarget.classList.toggle('on');\n        }\n    }\n\n    const applyOptionOnTextEditor = (exec: string, value: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            if(value === ''){\n                iframeRef.current.contentDocument.execCommand(exec);\n            }else{\n                iframeRef.current.contentDocument.execCommand(exec, true, value);\n            }\n        }\n    }\n\n    const focusOnTextEditor = ()=>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.focus();\n        }\n    }\n\n    // 텍스트 에디터 (옵션) 로직\n    const sendOptionToTextEditor = (exec: string, value: string, event?:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n        toggleButtonStatus(event);\n        applyOptionOnTextEditor(exec, value);\n        focusOnTextEditor();\n    }\n\n\n    const clickAndKeyUpEventOfTextEditor = (e: KeyboardEvent | MouseEvent & {key?: string}) =>{\n\n        if(firstClickOfEditorState){\n            clearTextOnTextEditor();\n            setFirstClickOfEditorState(false);\n        }\n\n        // 텍스트 에디터 (옵션 실시간 체크) 로직\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            const document = iframeRef.current.contentDocument;\n            if(optionsRef.current){\n                optionsRef.current.childNodes.forEach((list: any) => {\n                    if(list.dataset.cmd){\n                        if(document.queryCommandState(list.dataset.cmd)){\n                            list.classList.add('on');\n                        }else{\n                            list.classList.remove('on');\n                        }\n                    } \n                });\n            }\n        }\n\n        // 백스페이스를 눌렀을떄 이미지가 지워졌는지 확인하는 로직\n        if(e.type === \"keyup\"){\n            if(e.key === \"Backspace\"){\n                // imageState - 기존 이미지 지워졌는지 검사\n                imageState.descriptionImage.forEach(image => {\n                    if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(image.filename) === -1){\n                        setImageState({\n                            ...imageState,\n                            descriptionImage: imageState.descriptionImage.filter(item => item.filename !== image.filename)\n                        });\n\n                    }\n                });\n\n                // descriptionImageFilesState - 신규 이미지 지워졌는지 검사\n                if(inputTagCountState > 0){\n                    for(let i=1; i<=inputTagCountState; i++){\n    \n                        if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(`decriptionImgTag-${i}`) !== -1){\n                            console.log('이미지가 있다.!!')\n                        }else{\n                            console.log('이미지가 없다.!!', descriptionImageFilesState)\n        \n                            if(document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`))\n                            document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`)[0].value = \"\";\n\n                            if(descriptionImageFilesState && descriptionImageFilesState.length > 0){\n                                setDescriptionImageFilesState(descriptionImageFilesState.map((file, index) => {\n                                    if(index+1 === i){\n                                        return null;\n                                    }else{\n                                        return file;\n                                    }\n                                    \n                                }))\n                            }\n                            \n                        }\n                    }\n                }                \n            }\n        }\n        \n       \n    }\n\n    const fontSizeRef = useRef<HTMLUListElement>(null);\n\n    // 텍스트 에디터 폰트사이즈 윈도우 토글\n    const toggleFontSizeWindow = () =>{\n        if(fontSizeRef.current){\n            fontSizeRef.current.classList.toggle('on');\n        }\n    }\n\n    const setTextOnTextEditor = (text: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = text;\n        }\n    }\n\n    const setDefaultOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.designMode = \"on\"\n            iframeRef.current.contentDocument.head.innerHTML \n            = `<style>\n                @import url(\"https://fonts.googleapis.com/earlyaccess/notosanskr.css\");\n            </style>`;\n            iframeRef.current.contentDocument.body.style.fontFamily = 'Noto Sans KR';\n            iframeRef.current.contentDocument.body.style.fontWeight = '400';\n            iframeRef.current.contentDocument.body.style.margin = '0px';\n            const placeholder = \"<div style='color: grey;'>내용을 입력해주세요.</div>\"\n            iframeRef.current.contentDocument.body.innerHTML = placeholder;\n        }\n    }\n\n    const setContentsOnPage = (id:string) =>{\n        axios({\n            method: 'get',\n            url: `/api/board/list/${match.params.list_id}`\n        }).then((res: {data: boardListType}) =>{\n            console.log('res', res.data);\n\n            setTitleState(res.data.title);\n            setTagsState(res.data.tags[0] === '' ? [] : res.data.tags);\n            setImageState(res.data.images);\n\n            setTagsOnViewByData(res.data.tags);\n\n            if(res.data.images.thumbnailImage.length > 0){\n                setTempThumbnailImagePathState(path.resolve('./uploads', res.data.images.thumbnailImage[0].filename));\n            }\n\n            setTextOnTextEditor(res.data.description);\n        });\n    }\n\n    useEffect(()=>{\n        setDefaultOnTextEditor();\n\n        const listId = match.params.list_id;\n        \n        // 수정요청으로 들어올 경우\n        if(listId){\n            setIdState(listId);\n            setContentsOnPage(listId);\n            setFirstClickOfEditorState(false);\n        }\n\n        window.scrollTo(0, 0);\n\n    }, []);\n\n    useEffect(()=>{\n        addEventOnTextEditor();\n        return ()=>{\n            removeEventOnTextEditor();\n        }\n    }, [descriptionImageFilesState, imageState, firstClickOfEditorState]);\n\n\n\n    const addEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.addEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.addEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const removeEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.removeEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.removeEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n\n    const clearTextOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = \"\";\n        }\n    }\n\n    const getTextEditorContentsAfterRemoveTempImgSrc = () =>{\n        let stringData = iframeRef.current?.contentDocument?.body.innerHTML;\n        stringData = stringData?.replace(/([0-9]\\\"\\s)src=\\\".*?\\\"/gi, \"$1\");\n        // \"<img src='dasd' />dassadsdads<img src='dasd' />\".replace(/src='.*?\\'/gi, \"\")\n        // \"<img class\\\".decriptionImgTag-1\\\" src=\\\"adasddsasdadas\\\" />\".replace(/([0-9]\\\"\\s)src=\\\".*?\\\"/gi, \"$1\");\n        return stringData ? stringData : '';\n    }\n\n    const getTextEditorContents = ()=>{\n        let stringData = iframeRef.current?.contentDocument?.body.innerHTML;\n        return stringData ? stringData : '';\n    }\n\n\n    const nullCheckData = (targets: {type: string; target: string;}[]): boolean =>{\n        let passFlag = true;\n      \n        targets.some(item => {\n            console.log('item', item);\n\n            if(item.target === '' || item.target.indexOf('내용을 입력해주세요.') !== -1){\n                onOpenConfirmModal({\n                    status: true,\n                    title: `${item.type} 오류`,\n                    desc: `${item.type}을 입력해 주세요.`,\n                    confirm: {\n                        isShow: true,\n                        func: () => {\n                            onCloseModal();\n                            switch(item.type){\n                                case '제목':\n                                    titleInputRef.current?.focus();\n                                    break;\n                                case '본문':\n                                    if(iframeRef.current?.contentDocument)\n                                        iframeRef.current?.contentDocument.body.focus();\n                                    break;\n                                default:\n                            }\n                        }\n                    }\n                });\n                passFlag = false;\n                return true;\n            }\n        });\n\n        return passFlag;\n       \n    }\n\n    const setFormData = (idState: string) =>{\n        const form = new FormData();\n\n        form.append('title', titleState);\n        form.append('tags', JSON.stringify(tagsState));\n        form.append('description', getTextEditorContentsAfterRemoveTempImgSrc());\n        form.append('writer', '신범근');\n\n        if(idState == ''){ // 신규 등록\n\n            // 썸네일 이미지\n            if(thumbnailImageFileState){ \n                form.append('thumbnailImage', thumbnailImageFileState);\n            }\n\n            // 본문 이미지     \n            if(descriptionImageFilesState){ \n                descriptionImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImage', file);\n                    }\n                })\n            }           \n\n        }else{ // 수정 등록\n            form.append('_id', idState);\n            form.append('images', JSON.stringify(imageState)); // 기존 이미지 정보\n            \n            // 썸네일 이미지\n            if(thumbnailImageFileState){ // 이미지를 추가, 변경할때\n                form.append('thumbnailImage', thumbnailImageFileState);\n            }\n\n            // 본문 이미지\n            if(descriptionImageFilesState){ // 이미지를 추가, 변경할때\n                descriptionImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImage', file);\n                    }\n                })\n            }\n        }\n\n        return form;\n    }\n\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n\n        const passFlag = nullCheckData([\n                {type: '제목', target: titleState}, \n                {type: '태그', target: tagsState.toString()}, \n                {type: '본문', target: getTextEditorContents()}\n            ]);\n\n        \n        if(passFlag){\n            const form = setFormData(idState);\n        \n            if(idState === ''){ // 신규 등록\n                \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'post',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('post_res', res.data[0]);\n                    history.push('/board');\n                });\n    \n            }else{ // 수정 등록\n      \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'put',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('put_res', res.data[0]);\n                    history.push('/board/view?_id=' + idState);\n                });\n            }\n    \n    \n            // 데이터 비우기\n            setTitleState('');\n            setImageState({\n                thumbnailImage: [],\n                descriptionImage:[]\n            });\n            setThumbnailImageFileState(null);\n            setDescriptionImageFilesState(null);\n    \n            clearTextOnTextEditor();\n        }\n    }\n\n    const setTitleForOnChange = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        const {name, value} = e.target;\n        setTitleState(value);\n    }\n\n    const setTagsData = (e:React.MouseEvent<HTMLSpanElement, MouseEvent>) =>{\n\n        console.log('클릭');\n\n        const classList = e.currentTarget.classList;\n        const innerText = e.currentTarget.innerText;\n\n        if(classList.contains('on')){\n            // 버튼 OFF\n            classList.remove('on');\n            if(tagsState.indexOf(innerText) !== -1){ // 해당 태그가 있을 경우 => 뺸다\n                setTagsState(tagsState.filter(tag => tag !== innerText));\n            }\n        }else{\n            // 버튼 ON\n            classList.add('on');\n            if(tagsState.indexOf(innerText) === -1){ // 해당 태그가 없을 경우 => 더한다\n                setTagsState(tagsState.concat(innerText));\n            }\n        }\n    }\n\n    const setTagsOnViewByData = (initTags:string[]) =>{\n        document.querySelectorAll('.bb-board-write__tags-wrapper > span').forEach(span =>{\n            initTags.forEach(tag =>{\n                if(tag === span.innerHTML){\n                    span.classList.add('on');\n                }\n            })\n        })\n    }\n\n    const setThumbnailImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        if(e.currentTarget.files){\n\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                    setThumbnailImageFileState(null); // State 초기화\n                }else{\n                    setTempThumbnailImageOnView(imageFile);\n                    setThumbnailImageFileState(imageFile);\n                }\n            }\n        }\n    }\n\n\n    const setTempThumbnailImageOnView = (thumbImageFile: File) =>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                setTempThumbnailImagePathState(e.target.result.toString());\n            }\n        }\n        reader.readAsDataURL(thumbImageFile);\n    }\n\n    const verifyImageType = (image: string) =>{\n        const types = ['image/jpeg', 'image/png', 'image/jpg'];\n        if(types.indexOf(image) === -1){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    const removeThumbnailImage = () =>{\n        setTempThumbnailImagePathState('');\n        setThumbnailImageFileState(null);   \n        setImageState({\n            ...imageState,\n            thumbnailImage: []\n        });   \n    }\n\n    const openFileInput = ()=>{\n\n        setInputTagCountState(inputTagCountState + 1);\n        setTimeout(()=>{\n            document.querySelector<HTMLInputElement>(`.decriptionInputFileTag-${inputTagCountState+1}`)?.click();\n        }, 10)\n        \n        // iframeRef.current?.contentDocument?.write(\"<img width='100%' height='300px'/>\");\n    }\n\n    const setDescriptionImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n\n        // console.log('e', e);\n\n        if(e.currentTarget.files){\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    if(inputTagCountState !== 0){\n                        setInputTagCountState(inputTagCountState-1);\n                    }\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                }else{\n                    setTempDescriptImageOnTextEditor(imageFile);\n\n                    if(descriptionImageFilesState === null){\n                        setDescriptionImageFilesState([imageFile]);\n                    }else{\n                        setDescriptionImageFilesState(descriptionImageFilesState.concat(imageFile));\n                    }\n                }   \n            }\n\n        }\n    \n    }\n\n    const setTempDescriptImageOnTextEditor = (descriptionImageFile: File)=>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                const imageTag = `<img width='100%' height='auto' class=\".decriptionImgTag-${inputTagCountState}\" src=\"${e.target.result.toString()}\" />`;\n                iframeRef.current?.contentDocument?.execCommand('InsertHTML', false, imageTag);\n            }\n        }\n        reader.readAsDataURL(descriptionImageFile);\n\n        focusOnTextEditor();\n    }\n\n    return (\n        <main className=\"bb-board-write__main\">\n            <section className=\"bb-board-write__form-section\">\n                <form className=\"bb-board-write__form\" onSubmit={onSubmit}>\n\n                {[...Array(inputTagCountState)].map((v, key) => <input key={key} className={`decriptionInputFileTag-${key+1}`} type=\"file\" onChange={setDescriptionImageFile} />)}\n\n                <input className=\"bb-board-write__title\" ref={titleInputRef} placeholder=\"제목을 입력해주세요.\" type=\"text\" name=\"title\" value={titleState} onChange={setTitleForOnChange}/>\n                {/* <input className=\"bb-board-write__title--sub\" placeholder=\"소제목을 입력해주세요.\" type=\"text\" name=\"subTitle\" value={boardTitle?.subTitle} onChange={setTitleForOnChange}/> */}\n                <div className=\"bb-board-write__tags-wrapper\">\n                    <span onClick={setTagsData}>개발</span>\n                    <span onClick={setTagsData}>공부</span>\n                    <span onClick={setTagsData}>생각</span>\n                </div>\n                <div className=\"bb-board-write__editor-wrapper\">\n                    <ul className=\"bb-board-write__editor-options\" ref={optionsRef}>\n                        <li onClick={toggleFontSizeWindow}>\n                            <VscTextSize />\n                            <ul className=\"bb-board-write__editor-font-box\" ref={fontSizeRef}>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '1')}>10px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '2')}>13px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '3')}>16px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '4')}>18px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '5')}>24px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '6')}>32px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '7')}>48px</li>\n                            </ul>\n                        </li>\n                        <li data-cmd=\"bold\" onClick={(e) => sendOptionToTextEditor('bold', '', e)}><BsTypeBold /></li>\n                        <li data-cmd=\"italic\" onClick={(e) => sendOptionToTextEditor('italic', '', e)}><BsTypeItalic /></li>\n                        <li data-cmd=\"underline\" onClick={(e) => sendOptionToTextEditor('underline', '', e)}><BsTypeUnderline /></li>\n                        <li data-cmd=\"strikethrough\" onClick={(e) => sendOptionToTextEditor('strikethrough', '', e)}><BsTypeStrikethrough /></li>\n                        <li data-cmd=\"justifycenter\" onClick={(e) => sendOptionToTextEditor('justifycenter', '', e)}><BsTextCenter /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertunorderedlist', '')}><BsListUl /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertorderedlist', '')}><BsListOl /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('indent', '')}><BsTextIndentLeft /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('outdent', '')}><BsTextIndentRight /></li>\n                        <li onClick={openFileInput}><BsCardImage /></li>\n                    </ul>\n                    <iframe className=\"bb-board-wrtie__editor\" name=\"boadeditrot\" ref={iframeRef}></iframe>\n                </div>\n                <div className={`bb-board-write__image-tiles ${tempThumbnailImagePathState !== '' && 'on'}`}>\n                    <span style={{backgroundImage: `url(${tempThumbnailImagePathState})`}} onClick={removeThumbnailImage}><BsX /></span>\n                </div>\n                <div className=\"bb-board-write__image-upload-btn\">\n                    <input type=\"file\" ref={thumbImageRef} onChange={setThumbnailImageFile} />\n                    <button type=\"button\" onClick={()=> thumbImageRef.current?.click()}>썸네일 이미지 업로드</button>\n                </div>\n                <div className=\"bb-board-write__buttons\">\n                    <button type=\"button\" onClick={() => history.push('/board')}>취소</button>\n                    <button type=\"submit\">완료</button>\n                </div>\n                </form>\n            </section>\n        </main>\n    )\n}\n\nexport default BoardWrite;","import React, { useRef, useState } from 'react';\nimport './TextEditor.scss';\nimport {\n    BsTypeBold, \n    BsTypeItalic,\n    BsTypeUnderline,\n    BsTypeStrikethrough,\n    BsListUl,\n    BsListOl,\n    BsTextIndentLeft,\n    BsTextIndentRight,\n    BsTextCenter,\n    BsCardImage\n} from 'react-icons/bs';\nimport {VscTextSize} from 'react-icons/vsc';\nimport { useEffect } from 'react';\n\nfunction TextEditor(){\n\n    type textEditorImagesType = {\n        descriptionImage: {\n            originalname: string;\n            filename: string;\n        }[];\n    }\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const optionsRef = useRef<HTMLUListElement>(null);\n    const fontSizeRef = useRef<HTMLUListElement>(null);\n\n    const [inputTagCountState, setInputTagCountState] = useState(0);\n    const [firstClickOfEditorState, setFirstClickOfEditorState] = useState(true);\n    const [imageState, setImageState] = useState<textEditorImagesType>({\n        descriptionImage:[]\n    });\n    const [descriptionImageFilesState, setDescriptionImageFilesState] = useState<(File | null)[] | null>(null);\n\n    // 텍스트 에디터 폰트사이즈 윈도우 토글\n    const toggleFontSizeWindow = () =>{\n        if(fontSizeRef.current){\n            fontSizeRef.current.classList.toggle('on');\n        }\n    }\n    \n\n    // 텍스트 에디터 (옵션) 로직\n    const sendOptionToTextEditor = (exec: string, value: string, event?:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n        toggleButtonStatus(event);\n        applyOptionOnTextEditor(exec, value);\n        focusOnTextEditor();\n    }\n\n    const toggleButtonStatus = (event:React.MouseEvent<HTMLLIElement, MouseEvent> | undefined) =>{\n        if(event){\n            event.currentTarget.classList.toggle('on');\n        }\n    }\n\n    const focusOnTextEditor = ()=>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.focus();\n        }\n    }\n\n    const applyOptionOnTextEditor = (exec: string, value: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            if(value === ''){\n                iframeRef.current.contentDocument.execCommand(exec);\n            }else{\n                iframeRef.current.contentDocument.execCommand(exec, true, value);\n            }\n        }\n    }\n\n    const openFileInput = ()=>{\n\n        setInputTagCountState(inputTagCountState + 1);\n        setTimeout(()=>{\n            document.querySelector<HTMLInputElement>(`.decriptionInputFileTag-${inputTagCountState+1}`)?.click();\n        }, 10)\n        \n        // iframeRef.current?.contentDocument?.write(\"<img width='100%' height='300px'/>\");\n    }\n\n    const addEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.addEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.addEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const removeEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.removeEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.removeEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const clickAndKeyUpEventOfTextEditor = (e: KeyboardEvent | MouseEvent & {key?: string}) =>{\n\n        if(firstClickOfEditorState){\n            clearTextOnTextEditor();\n            setFirstClickOfEditorState(false);\n        }\n\n        // 텍스트 에디터 (옵션 실시간 체크) 로직\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            const document = iframeRef.current.contentDocument;\n            if(optionsRef.current){\n                optionsRef.current.childNodes.forEach((list: any) => {\n                    if(list.dataset.cmd){\n                        if(document.queryCommandState(list.dataset.cmd)){\n                            list.classList.add('on');\n                        }else{\n                            list.classList.remove('on');\n                        }\n                    } \n                });\n            }\n        }\n\n        // 백스페이스를 눌렀을떄 이미지가 지워졌는지 확인하는 로직\n        if(e.type === \"keyup\"){\n            if(e.key === \"Backspace\"){\n                // imageState - 기존 이미지 지워졌는지 검사\n                imageState.descriptionImage.forEach(image => {\n                    if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(image.filename) === -1){\n                        setImageState({\n                            ...imageState,\n                            descriptionImage: imageState.descriptionImage.filter(item => item.filename !== image.filename)\n                        });\n\n                    }\n                });\n\n                // descriptionImageFilesState - 신규 이미지 지워졌는지 검사\n                if(inputTagCountState > 0){\n                    for(let i=1; i<=inputTagCountState; i++){\n    \n                        if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(`decriptionImgTag-${i}`) !== -1){\n                            console.log('이미지가 있다.!!')\n                        }else{\n                            console.log('이미지가 없다.!!', descriptionImageFilesState)\n        \n                            if(document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`))\n                            document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`)[0].value = \"\";\n\n                            if(descriptionImageFilesState && descriptionImageFilesState.length > 0){\n                                setDescriptionImageFilesState(descriptionImageFilesState.map((file, index) => {\n                                    if(index+1 === i){\n                                        return null;\n                                    }else{\n                                        return file;\n                                    }\n                                    \n                                }))\n                            }\n                            \n                        }\n                    }\n                }                \n            }\n        }\n    }\n\n    const clearTextOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = \"\";\n        }\n    }\n\n    const setDefaultOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.designMode = \"on\"\n            iframeRef.current.contentDocument.head.innerHTML \n            = `<style>\n                @import url(\"https://fonts.googleapis.com/earlyaccess/notosanskr.css\");\n            </style>`;\n            iframeRef.current.contentDocument.body.style.fontFamily = 'Noto Sans KR';\n            iframeRef.current.contentDocument.body.style.fontWeight = '400';\n            iframeRef.current.contentDocument.body.style.margin = '0px';\n            const placeholder = \"<div style='color: grey;'>내용을 입력해주세요.</div>\"\n            iframeRef.current.contentDocument.body.innerHTML = placeholder;\n        }\n    }\n\n    useEffect(()=>{\n        setDefaultOnTextEditor();\n\n        // const listId = match.params.list_id;\n        \n        // 수정요청으로 들어올 경우\n        // if(listId){\n            // setIdState(listId);\n            // setContentsOnPage(listId);\n            setFirstClickOfEditorState(false);\n        // }\n\n        window.scrollTo(0, 0);\n\n    }, []);\n\n    useEffect(()=>{\n        addEventOnTextEditor();\n        return ()=>{\n            removeEventOnTextEditor();\n        }\n    }, [descriptionImageFilesState, imageState, firstClickOfEditorState]);\n\n    return (\n        <div className=\"bb-board-write__editor-wrapper\">\n            <ul className=\"bb-board-write__editor-options\" ref={optionsRef}>\n                <li onClick={toggleFontSizeWindow}>\n                    <VscTextSize />\n                    <ul className=\"bb-board-write__editor-font-box\" ref={fontSizeRef}>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '1')}>10px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '2')}>13px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '3')}>16px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '4')}>18px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '5')}>24px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '6')}>32px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '7')}>48px</li>\n                    </ul>\n                </li>\n                <li data-cmd=\"bold\" onClick={(e) => sendOptionToTextEditor('bold', '', e)}><BsTypeBold /></li>\n                <li data-cmd=\"italic\" onClick={(e) => sendOptionToTextEditor('italic', '', e)}><BsTypeItalic /></li>\n                <li data-cmd=\"underline\" onClick={(e) => sendOptionToTextEditor('underline', '', e)}><BsTypeUnderline /></li>\n                <li data-cmd=\"strikethrough\" onClick={(e) => sendOptionToTextEditor('strikethrough', '', e)}><BsTypeStrikethrough /></li>\n                <li data-cmd=\"justifycenter\" onClick={(e) => sendOptionToTextEditor('justifycenter', '', e)}><BsTextCenter /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertunorderedlist', '')}><BsListUl /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertorderedlist', '')}><BsListOl /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('indent', '')}><BsTextIndentLeft /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('outdent', '')}><BsTextIndentRight /></li>\n                <li onClick={openFileInput}><BsCardImage /></li>\n            </ul>\n            <iframe className=\"bb-board-wrtie__editor\" name=\"boadeditrot\" ref={iframeRef}></iframe>\n        </div>\n    )\n}\n\nexport default TextEditor;","import React from 'react';\nimport TextEditor from '../common/TextEditor';\n\nfunction BoardTest(){\n    return (\n        <div className=\"board-test\" style={{marginTop: '50px'}}>\n           <TextEditor />\n        </div>\n    )\n}\n\nexport default BoardTest;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {\n  Header,\n  Footer,\n  Modal,\n  Login,\n  BoardHome,\n  BoardView,\n  BoardWrite,\n  BoardTest\n} from './components';\nimport './App.scss';\n\nexport type matchType = {\n  list_id: string;\n}\n\nfunction App() {\n  return (\n    <div className=\"bb-body\">\n      <BrowserRouter>\n        <Header />\n        <Modal />\n        <Route exact path=\"/\" component={BoardHome} />\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/board/test\" component={BoardTest} />\n          <Route path=\"/board/write\" component={BoardWrite} />\n          <Route path=\"/board/write/:list_id\" component={BoardWrite} />\n          <Route path=\"/board/view/:list_id\" component={BoardView} />\n          <Route path=\"/board\" component={BoardHome} />\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport modal from './modal';\n\nconst rootReducer = combineReducers({\n    modal\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}