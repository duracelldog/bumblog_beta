{"version":3,"sources":["assets/images/board/default_thumbnail.jpg","modules/auth.ts","hooks/useAuth.tsx","components/common/Header.tsx","components/common/Footer.tsx","modules/modal.ts","hooks/useModal.tsx","components/common/Modal.tsx","components/common/Login.tsx","components/home/Homepage.tsx","components/board/BoardList.tsx","components/board/BoardHome.tsx","components/board/BoardView.tsx","components/common/TextEditor.tsx","components/board/BoardWrite.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["module","exports","LOGIN","initialState","email","name","auth","state","action","type","payload","useAuth","authState","useSelector","dispatch","useDispatch","onLogin","useCallback","data","login","onLogout","Header","history","useHistory","mobileMenuRef","useRef","subMenuRef","toggleMainMenu","event","status","current","classList","remove","add","toggle","openSubMenu","document","body","addEventListener","bodyFunc","closeSubMenu","removeEventListener","e","console","log","srcElement","className","flag","forEach","val","index","baseVal","useEffect","window","onClick","to","contains","ref","axios","method","url","then","res","push","Footer","CLOSE","title","desc","confirm","isShow","func","modal","useModal","modalState","onOpenAlertModal","openAlertModal","onOpenConfirmModal","openConfirmModal","onCloseModal","Modal","modalEl","useState","modalData","setModalData","closeWindow","defaultProps","Login","props","password","userInfoState","setUserInfoState","modeState","setModeState","redirctState","setRedirectState","toggleBarRef","toggleModeState","targetMode","setLoginState","target","value","redirectValue","URLSearchParams","location","search","get","onSubmit","preventDefault","withCredentials","goBack","placeholder","onChange","Homepage","BoardList","setTags","date","setDate","defaultThumbnail","thumbImg","setThumbImg","checkDate","toString","length","tags","thumbnailImage","path","resolve","filename","timeStamp","_id","substring","Date","parseInt","year","getUTCFullYear","month","getUTCMonth","day","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","dateForm","map","tag","key","writer","style","backgroundImage","BoardHome","boardList","setBoardList","tagFilter","querySelectorAll","list","currentTarget","targetTag","innerText","getListFromDB","filterdList","filter","indexOf","scrollTo","x","BoardView","description","descriptionImage","listData","setListData","thumbnailImageState","setThumbnailImageState","match","params","id","dangerouslySetInnerHTML","__html","TextEditor","textEditorContentsState","setTextEditorContentsState","textEditorImageState","setTextEditorImageState","textEditorImageFilesState","setTextEditorImageFilesState","iframeRef","optionsRef","fontSizeRef","inputTagCountState","setInputTagCountState","firstClickOfEditorState","setFirstClickOfEditorState","sendOptionToTextEditor","exec","toggleButtonStatus","applyOptionOnTextEditor","focusOnTextEditor","contentDocument","focus","execCommand","clickAndKeyUpEventOfTextEditor","clearTextOnTextEditor","childNodes","dataset","cmd","queryCommandState","image","innerHTML","item","i","file","getTextEditorContentsAfterRemoveTempImgSrc","setImageFile","files","imageFile","verifyImageType","setTempImageOnTextEditor","concat","descriptionImageFile","reader","FileReader","onload","result","imageTag","readAsDataURL","stringData","replace","designMode","head","fontFamily","fontWeight","margin","setDefaultOnTextEditor","contentWindow","Array","v","data-cmd","setTimeout","querySelector","click","BoardWrite","thumbImageRef","titleInputRef","titleState","setTitleState","tagsState","setTagsState","idState","setIdState","tempThumbnailImagePathState","setTempThumbnailImagePathState","thumbnailImageFilesState","setThumbnailImageFilesState","listId","setTagsOnViewByData","setContentsOnPage","setTagsData","initTags","span","setTempThumbnailImageOnView","thumbImageFile","targets","passFlag","some","nullCheckData","form","FormData","append","JSON","stringify","setFormData","headers","App","loginData","info","exact","component","Boolean","hostname","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf0df419.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default_thumbnail.08a1cc29.jpg\";","const LOGIN = 'auth/login' as const;\nconst LOGOUT = 'auth/logout' as const;\n\nexport type AuthDataType = {\n    email: string;\n    name: string;\n}\n\nexport const login = (data: AuthDataType) =>({\n    type: LOGIN,\n    payload: {\n        email: data.email,\n        name: data.name     \n    }\n})\n\nexport const logout = () =>({\n    type: LOGOUT,\n    payload: {\n        email: '',\n        name: ''\n    }\n})\n\ntype AuthAction = \n    | ReturnType<typeof login>\n    | ReturnType<typeof logout>\n\nconst initialState: AuthDataType = {\n    email: '',\n    name: ''\n}\n\nfunction auth(state: AuthDataType = initialState, action: AuthAction): AuthDataType{\n    switch(action.type){\n        case LOGIN:\n            return {\n                email: action.payload.email,\n                name: action.payload.name\n            }\n        case LOGOUT:\n            return {\n                email: action.payload.email,\n                name: action.payload.name\n            }\n        default:\n            return state;\n    }\n}\n\nexport default auth;","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../modules\";\nimport { login, logout } from \"../modules/auth\";\n\nfunction useAuth(){\n    const authState = useSelector((state: RootState) => state.auth);\n    const dispatch = useDispatch();\n\n    const onLogin = useCallback(data => {\n        dispatch(login(data))\n    }, [dispatch]);\n\n    const onLogout = useCallback(() => {\n        dispatch(logout());\n    }, [dispatch]);\n\n    return {\n        authState,\n        onLogin,\n        onLogout\n    }\n}\n\nexport default useAuth;","import React, {useRef, useMemo, useEffect, useState} from 'react';\nimport axios from 'axios';\nimport {Link, RouteChildrenProps, useHistory} from 'react-router-dom';\nimport {BiMenu, BiUser} from 'react-icons/bi';\nimport './Header.scss';\nimport useAuth from '../../hooks/useAuth';\n\nfunction Header(){\n\n    const history = useHistory();\n\n    const mobileMenuRef = useRef<HTMLUListElement>(null);\n    const subMenuRef = useRef<HTMLDivElement>(null);\n\n    const {authState, onLogout} = useAuth();\n\n    // MainMenu 모바일에서 메뉴 펄치기 버튼\n    const toggleMainMenu = (event: any , status: Number = 2) =>{\n        if(mobileMenuRef.current){\n            switch(status){\n                case 0: // close\n                    mobileMenuRef.current.classList.remove('on');\n                    break;\n                case 1: // open\n                    mobileMenuRef.current.classList.add('on');\n                    break;\n                case 2: // toggle\n                    mobileMenuRef.current.classList.toggle('on');\n                    break;\n            }\n        }           \n    }\n    // SubMenu 데스크탑/모바일 마이페이지 아이콘 버튼\n    const toggleSubMenu = () =>{\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            // console.log('classList', classList);\n            if(classList.contains('on')){\n                closeSubMenu();\n            }else{\n                openSubMenu();\n            }\n        }\n    }\n\n    const openSubMenu = () =>{\n        // console.log(\"openSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.add('on');\n            document.body.addEventListener('click', bodyFunc);\n        }\n    }\n\n    const closeSubMenu = () =>{\n        // console.log(\"closeSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.remove('on');\n            document.body.removeEventListener('click', bodyFunc);\n        }\n    }\n\n    const bodyFunc = (e: any) =>{\n        console.log('bodyevent 실행', e.srcElement.className);\n        const exClassName = [\n            'bb-header__sub-menu-wrapper',\n            'bb-header__sub-menu_login-massage',\n            'bb-header__sub-menu-box-ul',\n            'bb-header__sub-menu-box-li'\n        ];\n\n        let flag = true;\n\n\n        exClassName.forEach((val, index)=>{\n            if(e.srcElement.className === val || e.srcElement.className.baseVal === 'icon-user'){\n                flag = false;\n            }\n        });\n\n        if(flag){\n            closeSubMenu();\n        }\n    }\n\n    const logout = () =>{\n        axios({\n            method: 'delete',\n            url: '/api/auth/login'\n        }).then((res) =>{\n            console.log('post_res', res.data);\n            if(res.data.status){\n                onLogout();\n                history.push('/');\n            }\n        });\n    }\n\n    useEffect(()=>{\n        window.addEventListener('resize', ()=>{\n            mobileMenuRef.current?.classList.remove('on');\n            subMenuRef.current?.classList.remove('on');\n        });\n    }, []);\n\n    return (\n        <nav className=\"bb-header__nav\">\n            <div className=\"bb-header__menu--desktop\">\n                <div className=\"bb-header__mobile-menu-btn\" onClick={(e) => toggleMainMenu(e, 2)}><BiMenu className=\"icon-menu\" /></div>\n                <div className=\"bb-header__logo-btn\" onClick={(e) => toggleMainMenu(e, 0)}><Link className=\"text-black \" to=\"/\">Bumblog</Link></div>\n                <div className=\"bb-header__desktop-menu-wrapper\">\n                    <ul className=\"bb-header__desktop-menu\">\n                      <li></li>\n                    </ul>\n                    <div className=\"bb-header__sub-menu\">\n                        <div className=\"bb-header__sub-menu-icon\" onClick={toggleSubMenu}><BiUser className=\"icon-user\" /></div>\n                        <div className=\"bb-header__sub-menu-box\" ref={subMenuRef}>\n                            <div className=\"edge-wrapper\">\n                                <div className=\"edge\"></div>\n                            </div>\n                            <div className=\"bb-header__sub-menu-wrapper\">\n                                {authState.name !== '' && (\n                                    <div className=\"bb-header__sub-menu_login-massage\">\n                                        Signed&nbsp;in&nbsp;as\n                                        <div>{authState.name}</div>\n                                    </div>\n                                )}\n                                <ul className=\"bb-header__sub-menu-box-ul\">\n                                    {authState.name !== '' ? (\n                                            <li className=\"bb-header__sub-menu-box-li\" onClick={logout}>Logout</li>\n                                        ) : (\n                                            <li className=\"bb-header__sub-menu-box-li\">\n                                                <Link to=\"/login\">Login</Link>\n                                            </li>\n                                        )}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"bb-header__mobile-menu-wrapper\">\n                <ul className=\"bb-header__mobile-menu\" ref={mobileMenuRef}>\n                    <li onClick={(e) => toggleMainMenu(e, 0)}><Link to=\"/board\">MENU-1</Link></li>\n                    <li>MENU-2</li>\n                    <li>MENU-3</li>\n                    <li>MENU-4</li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer(){\n    return (\n        <footer className=\"bb-common__footer\">\n            <div className=\"bb-common__footer-contents-wrapper\">\n                <div className=\"bb-common__footer-copyright\">\n                    <div>Copyright © 2020 Bumblog Inc. All rights reserved</div>\n                </div>\n                <div className=\"text-bold\">Bumblog</div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","const OPEN_ALERT = 'modal/open' as const;\nconst OPEN_CONFIRM = 'modal/open_confirm' as const;\nconst CLOSE = 'modal/close' as const;\n\n\nexport type ModalDataType = {\n    status: boolean;\n    title: string;\n    desc: string;\n    confirm: {\n        isShow: boolean;\n        func?: () => void;\n    };\n}\n\nexport const openAlertModal = (data: ModalDataType) =>({\n    type: OPEN_ALERT,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: false\n        }\n    }\n\n});\n\nexport const openConfirmModal = (data: ModalDataType) =>({\n    type: OPEN_CONFIRM,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: data.confirm.isShow,\n            func: data.confirm.func\n        }\n    }\n});\n\nexport const closeModal = () =>({\n    type: CLOSE\n})\n\ntype ModalAction = \n    | ReturnType<typeof openAlertModal>\n    | ReturnType<typeof openConfirmModal>\n    | ReturnType<typeof closeModal>\n\nconst initialState: ModalDataType = {\n    status: false,\n    title: '',\n    desc: '',\n    confirm: {\n        isShow: false,\n        func: () => {}\n    }\n}\n\nfunction modal(state: ModalDataType = initialState, action: ModalAction): ModalDataType{\n    switch(action.type){\n        case OPEN_ALERT:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                }\n            }\n        case OPEN_CONFIRM:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                    func: action.payload.confirm.func\n                }\n            }\n        case CLOSE:\n            return {\n                ...state,\n                status: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default modal;","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../modules';\nimport { openAlertModal, openConfirmModal, closeModal } from '../modules/modal';\nimport { useCallback } from 'react';\n\nfunction useModal(){\n    const modalState = useSelector((state:RootState) => state.modal);\n    const dispatch = useDispatch();\n\n    const onOpenAlertModal = useCallback((data)=>{\n        dispatch(openAlertModal(data));\n    }, [dispatch]);\n\n    const onOpenConfirmModal = useCallback((data)=>{\n        dispatch(openConfirmModal(data));\n    }, [dispatch]);\n\n    const onCloseModal = useCallback(()=>{\n        dispatch(closeModal());\n    }, [dispatch]);\n\n    return {\n        modalState,\n        onOpenAlertModal,\n        onOpenConfirmModal,\n        onCloseModal\n    }\n}\n\nexport default useModal;","import React, { useRef, useState, useEffect } from 'react';\nimport './Modal.scss';\nimport useModal from '../../hooks/useModal';\nimport {ModalDataType} from '../../modules/modal';\nimport {BsX} from 'react-icons/bs';\n\nfunction Modal({data} : {data: ModalDataType}){\n\n    const {modalState, onCloseModal} = useModal();\n    const modalEl = useRef<HTMLDivElement>(null);\n    const [modalData, setModalData] = useState<ModalDataType>(data);\n\n    useEffect(function(){\n        setModalData(modalState);\n    }, [modalState]);\n\n    const closeWindow = () =>{\n        onCloseModal();\n    }\n\n    return (\n        <div className={`bb-modal__body ${modalData.status && 'on'}`} ref={modalEl}>\n            <div className=\"bb-modal__dim\" onClick={closeWindow}></div>\n            <div className=\"bb-modal__window\">\n                <div className=\"bb-modal__window-close-btn\" onClick={closeWindow}><BsX className=\"bb-modal__window-corss-icon\" /></div>\n                <div>\n                    <h2 className=\"bb-modal__window-title\">{modalData.title}</h2>\n                    <div className=\"bb-modal__window-desc\">\n                        {modalData.desc}\n                    </div>\n                    <div className={`bb-modal__window-btns ${modalData.confirm.isShow && 'on'}`}>\n                        <button onClick={closeWindow}>아니오</button>\n                        <button onClick={modalData.confirm.func}>예</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nModal.defaultProps = {\n    data: {\n        status: false,\n        title: '',\n        desc: '',\n        confirm: {\n          isShow: false\n        }\n    }\n}\n\nexport default Modal;","import React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport './Login.scss';\nimport {Redirect, RouteChildrenProps} from 'react-router-dom';\n\n\ntype ParamsType = {\n    redirect: string;\n}\nfunction Login(props : RouteChildrenProps<ParamsType>){\n\n    const [userInfoState, setUserInfoState] = useState({\n        email: '',\n        name: '',\n        password: ''\n    });\n    const [modeState, setModeState] = useState('LOGIN');\n    const [redirctState, setRedirectState] = useState('');\n    const toggleBarRef = useRef<HTMLSpanElement>(null);\n\n    \n\n    const toggleModeState = (targetMode: string) =>{\n        setModeState(targetMode);\n        toggleBarRef.current?.classList.toggle('on');\n    }\n\n    const setLoginState = (e: React.ChangeEvent<HTMLInputElement>) =>{\n\n        const {name, value} = e.target;\n\n        setUserInfoState({\n            ...userInfoState,\n            [name]: value \n        })\n    }\n\n    const initLoginData = () =>{\n        setUserInfoState({\n            email: '',\n            name: '',\n            password: ''\n        });\n        toggleModeState('LOGIN');\n    }\n\n\n    const onSubmitForLogin = (e: React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n\n        if(modeState === 'LOGIN'){ // 로그인\n            axios({\n                method: 'post',\n                url: '/api/auth/login',\n                withCredentials: true,\n                data: userInfoState\n            }).then((res) =>{\n                console.log('post_res', res.data);\n                if(redirctState === ''){\n                    props.history.goBack();\n                }else{\n                    props.history.push(redirctState);\n                }\n                \n            });\n        }else{ // 신규 가입\n            axios({\n                method: 'post',\n                url: '/api/auth/user',\n                data: userInfoState\n            }).then((res) =>{\n                console.log('post_res', res.data);\n                initLoginData();\n            });\n        }\n    }\n\n    useEffect(()=>{\n        const redirectValue = new URLSearchParams(document.location.search).get('redirect')\n        if(redirectValue)\n            setRedirectState(redirectValue);\n\n        console.log('redirectValue', redirectValue);\n\n    }, []);\n\n    // Sign In 로그인\n    // Sign Up 가입\n    // Sign Out 로그아웃\n\n    return (\n        <main className=\"bb-login__main\">\n            <form className=\"bb-login__form\" onSubmit={onSubmitForLogin}>\n                <div className=\"bb-login__form-title\">\n                    <h2 className=\"text-black\">Bumblog</h2>\n                </div>\n                <div className=\"bb-login__input-wrapper\">\n                    <input type=\"text\" name=\"email\" placeholder=\"E-Mail\" value={userInfoState.email} onChange={setLoginState} />\n                    {modeState !== 'LOGIN' && <input type=\"text\" name=\"name\" value={userInfoState.name} placeholder=\"Name\" onChange={setLoginState} /> }\n                    <input type=\"password\" name=\"password\" placeholder=\"Password\" value={userInfoState.password} onChange={setLoginState} />\n                </div>\n                <div className=\"bb-login__mode-toggle\">\n                    <span className=\"bb-login__toggle-bar\" ref={toggleBarRef}>{modeState}</span>\n                    <div onClick={() => toggleModeState('LOGIN')}>Login</div>\n                    <div onClick={() => toggleModeState('REGISTER')}>Register</div>\n                </div>\n                <button className=\"bb-login__submit-button\" type=\"submit\">{modeState}</button>\n            </form>\n        </main>\n    )\n}\n\nexport default Login;","import React from 'react';\nimport {BiChevronRight} from 'react-icons/bi';\nimport './Homepage.scss';\nimport {Link} from 'react-router-dom';\n\nfunction Homepage(){\n    return (\n        <main className=\"bg-hp-main\">\n            <section>\n                <div className=\"bg-hp-hero\">\n                    <div className=\"bg-hp-copy-wrapper\">\n                        <div className=\"bg-hp-copy\">\n                            <h1>BeomGeun&nbsp;Shin</h1>\n                            <div className=\"text-medium text-grey\">Front-End Developer</div>\n                            <div className=\"bg-hp-desc\">\n                                <Link className=\"link\" to=\"/board\">이력서 보기<BiChevronRight className=\"icon-chevronright\" /></Link>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"bg-hp-hero-img-wrapper\">\n                        <figure className=\"bg-hp-hero-img\"></figure>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bg-hp-grid\">\n                <div className=\"bg-hp-grid-wrapper\">\n                    <ul className=\"bg-hp-table\">\n                        <li className=\"bg-hp-list merge-row bb-homme__site-intro\">\n                            <div className=\"bg-hp-banner\">\n                                <h1>사이트 소개</h1>\n                                <div>\n                                    본 사이트는 React, Redux, express, RESTful API, mongodb로 이루어져&nbsp;있습니다.\n                                </div>\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>이력서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>자기소개서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>경력기술서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                    </ul>   \n                </div>\n            </section>\n        </main>\n    )\n}\n\nexport default Homepage;","import React, { useEffect, useState } from 'react';\nimport {boardListType} from './BoardHome';\nimport {Link} from 'react-router-dom';\nimport path from 'path';\nimport './BoardList.scss';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\n\nfunction BoardList({data}: {data: boardListType}){\n\n    // console.log('data', data);\n\n    const [tags, setTags] = useState<string[]>([]);\n    const [date, setDate] = useState('');\n    const [thumbImg, setThumbImg] = useState(defaultThumbnail);\n\n    const dateForm = () =>{\n        const timeStamp = data._id.toString().substring(0,8);\n        const date = new Date(parseInt(timeStamp, 16) * 1000);\n\n        const year = date.getUTCFullYear(); // 2020\n        const month = checkDate(date.getUTCMonth());\n        const day = checkDate(date.getUTCDay());\n        const hour = checkDate(date.getUTCHours());\n        const minutes = checkDate(date.getUTCMinutes());\n        const seconds = checkDate(date.getUTCSeconds());\n\n        // return `${year}.${month}.${day} ${hour}:${minutes}:${seconds}`;\n        return `${year}.${month}.${day}`;\n    }\n\n    const checkDate = (date:number) =>{\n        if(date.toString().length === 1){\n            return \"0\" + date.toString();\n        }else{\n            return date.toString();\n        }\n    };\n\n    useEffect(()=>{\n        setTags(data.tags);\n\n        if(data.thumbnailImage.length > 0){\n            setThumbImg(path.resolve('./uploads', data.thumbnailImage[0].filename));\n        }\n\n        setDate(dateForm());\n    }, []);\n\n    return (\n            <li className=\"bb-board-list__body\">\n                <Link to={`/board/view/${data._id}`}>\n                    <div className=\"bb-board-list__contents-wrapper\">\n                        <div className=\"bb-board-list__article-wrapper\">\n                            <div>\n                                <div className=\"bb-board-list__article-title\">{data.title}</div>\n                                <div className=\"bb-board-list__article-tags\">\n                                    {data.tags.map((tag, index) => <span key={index}>{tag}</span>)}\n                                </div>\n                            </div>\n                            \n                            {/* <div className=\"bb-board-list__article-description\" dangerouslySetInnerHTML={{__html: data.description}}></div> */}\n                            <ul className=\"bb-board-list__article-extra-info\">\n                                <li>{date}</li>\n                                <li>{data.writer}</li>\n                            </ul>\n                        </div>\n                        <div>\n                            <figure className=\"bb-board-list__image\" style={{backgroundImage: `url(${thumbImg})`}}/>\n                        </div>\n                    </div>\n                </Link>\n            </li>\n        \n    )\n}\n\nexport default BoardList;","import React, { useEffect, useState } from 'react';\nimport './BoardHome.scss';\nimport BoardList from './BoardList';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport {BsPencilSquare} from 'react-icons/bs';\n\nexport type boardListType = {\n    _id: string;\n    tags: string[];\n    title: string;\n    description: string;\n    writer: string;\n    thumbnailImage: imageStateType[],\n    descriptionImage: imageStateType[]\n}\n\nexport type imageStateType = {\n    originalname: string;\n    filename: string;\n}\n\n\nfunction BoardHome(){\n\n    const [boardList, setBoardList] = useState<boardListType[]>([]);\n    const tagFilter = (e:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n\n        // 버튼 초기화\n        document.querySelectorAll('.bb-board-home__tags-ul > li').forEach((list)=>{\n            list.classList.remove('on');\n        });\n\n        // 버튼 표시\n        e.currentTarget.classList.add('on');\n\n        // 데이터 불러오고 => 필터 적용\n        const targetTag = e.currentTarget.innerText;\n\n        getListFromDB().then((res) => {\n            if(targetTag === '모두'){\n                setBoardList(res.data)\n            }else{\n                const filterdList = res.data.filter((list:boardListType) => list.tags.indexOf(targetTag) !== -1);\n                setBoardList(filterdList);\n            }\n        });\n    }\n\n    const getListFromDB = () =>{\n        return axios({\n            method: 'get',\n            url: '/api/board/list'\n        });\n    }\n\n    useEffect(()=>{\n        getListFromDB().then((res) =>{\n            setBoardList(res.data);\n        });\n\n        window.scrollTo(0, 0);\n    }, []);\n\n\n    return (\n        <main className=\"bb-board-home__main\">\n            <section className=\"bb-board-home__hero-section\">\n                <div>\n                    <h1>Bumblog</h1>\n                    <div className=\"bb-board-home__hero-desc\">\n                        생각나는 것을 기록하고 저장하는 공간\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__tags-section\">\n                <div>\n                    <ul className=\"bb-board-home__tags-ul\">\n                        <li className=\"on\" onClick={tagFilter}>모두</li>\n                        <li onClick={tagFilter}>개발</li>\n                        <li onClick={tagFilter}>공부</li>\n                        <li onClick={tagFilter}>생각</li>\n                    </ul>\n                </div>\n            </section>\n            <section className=\"bb-board-home__write-button-section\">\n                <div className=\"bb-board-home__btns-wrapper\">\n                    <div>&nbsp;</div>\n                    <div>\n                        <Link className=\"bb-board-home__icon-wrapper\" to=\"/board/write\">\n                            <BsPencilSquare className=\"bb-board-home__write-icon\" />&nbsp;글쓰기\n                        </Link>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__list-section\">\n                <ul className=\"bb-board-home__list-ul-tag\">\n                    {boardList.map(x => <BoardList key={x._id} data={x} />)}\n                </ul>\n            </section>\n            \n        </main>\n    )\n}\n\nexport default BoardHome;","import React, { useEffect, useState } from 'react';\nimport {Link, match, RouteChildrenProps} from 'react-router-dom';\nimport './BoardView.scss';\nimport axios from 'axios';\nimport {boardListType} from './BoardHome';\nimport {useHistory} from 'react-router-dom';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\nimport {BsPencilSquare, BsTrash} from 'react-icons/bs'\nimport path from 'path';\nimport useModal from '../../hooks/useModal';\n\ntype ParamsType = {\n    id: string;\n}\n\nfunction BoardView(props: RouteChildrenProps<ParamsType>){\n\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const [listData, setListData] = useState<boardListType>({\n        _id: '',\n        tags: [],\n        title: '',\n        description: '',\n        writer: '',\n        thumbnailImage: [],\n        descriptionImage: []\n    });\n\n    const [thumbnailImageState, setThumbnailImageState] = useState('');\n    const history = useHistory();\n    \n    useEffect(()=>{\n\n        window.scrollTo(0, 0);\n\n        axios({\n            method: 'get',\n            url: `/api/board/list/${props.match?.params.id}`\n        }).then((res) =>{\n            if(res.data){\n\n                setListData(res.data);\n                const thumbnailImage = res.data.thumbnailImage[0];\n\n                if(thumbnailImage){\n                    setThumbnailImageState(path.resolve('./uploads', thumbnailImage.filename));\n                }else{\n                    setThumbnailImageState(defaultThumbnail);   \n                }\n                \n            }\n        });\n    }, []);\n\n\n    const handleDelete = () =>{\n        onOpenConfirmModal({\n            status: true,\n            title: '정말 삭제하시겠습니까?',\n            desc: '삭제한 데이터는 복원할 수 없습니다.',\n            confirm: {\n                isShow: true,\n                func: () => {\n                    axios({\n                        method: 'delete',\n                        url: '/api/board/list',\n                        data: listData\n                    }).then((res) =>{\n                        console.log('deleteRes', res.data);\n                        onCloseModal();\n                        history.push('/board');\n                    });\n                }\n            }\n        });   \n    }\n\n\n    return (\n        <main className=\"bb-board-view__main\">\n            <section className=\"bb-board-view__hero-section\" style={{backgroundImage: `url(${thumbnailImageState})`}}>\n                <div className=\"bb-board-view__hero-section-title-wrapper\">\n                    <h1>{listData?.title}</h1>\n                    <div className=\"bb-board-view__subtitle\">\n                        {/* {listData?.subTitle} */}\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-view__article-section\">\n                <article className=\"bb-board-view__article tui-editor-contents\" dangerouslySetInnerHTML={{__html: listData.description}}></article>\n            </section>\n            <section className=\"bb-board-view__buttons-section\">\n                <ul className=\"bb-board-view__update-btns\">\n                    <li>\n                        <button>\n                            <Link to={`/board/write/${props.match?.params.id}`}>\n                                <BsPencilSquare className=\"bb-board-view__pencil-icon\" />\n                            </Link>\n                        </button>\n                    </li>\n                    <li>\n                        <button onClick={handleDelete}>\n                            <BsTrash className=\"bb-board-view__tresh-icon\" />\n                        </button>\n                    </li>\n                </ul>\n            </section>\n        </main>\n    );\n}\n\nexport default BoardView;","import React, { useRef, useState } from 'react';\nimport './TextEditor.scss';\nimport {\n    BsTypeBold, \n    BsTypeItalic,\n    BsTypeUnderline,\n    BsTypeStrikethrough,\n    BsListUl,\n    BsListOl,\n    BsTextIndentLeft,\n    BsTextIndentRight,\n    BsTextCenter,\n    BsCardImage\n} from 'react-icons/bs';\nimport { VscTextSize } from 'react-icons/vsc';\nimport { useEffect } from 'react';\nimport useModal from '../../hooks/useModal';\nimport {imageStateType} from '../board/BoardHome'\n\n\nfunction TextEditor({\n    textEditorContentsState,\n    setTextEditorContentsState,\n    textEditorImageState,\n    setTextEditorImageState,\n    textEditorImageFilesState,\n    setTextEditorImageFilesState\n}:{\n    textEditorContentsState: string\n    setTextEditorContentsState: React.Dispatch<React.SetStateAction<string>>\n    textEditorImageState: imageStateType[]\n    setTextEditorImageState: React.Dispatch<React.SetStateAction<imageStateType[]>>\n    textEditorImageFilesState: File[]\n    setTextEditorImageFilesState: React.Dispatch<React.SetStateAction<File[]>>\n}){\n\n\n    const {onOpenConfirmModal} = useModal();\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const optionsRef = useRef<HTMLUListElement>(null);\n    const fontSizeRef = useRef<HTMLUListElement>(null);\n\n    const [inputTagCountState, setInputTagCountState] = useState(0);\n    const [firstClickOfEditorState, setFirstClickOfEditorState] = useState(true);\n\n    // 텍스트 에디터 폰트사이즈 윈도우 토글\n    const toggleFontSizeWindow = () =>{\n        if(fontSizeRef.current){\n            fontSizeRef.current.classList.toggle('on');\n        }\n    }\n\n    // 텍스트 에디터 (옵션) 로직\n    const sendOptionToTextEditor = (exec: string, value: string, event?:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n        toggleButtonStatus(event);\n        applyOptionOnTextEditor(exec, value);\n        focusOnTextEditor();\n    }\n\n    const toggleButtonStatus = (event:React.MouseEvent<HTMLLIElement, MouseEvent> | undefined) =>{\n        if(event){\n            event.currentTarget.classList.toggle('on');\n        }\n    }\n\n    const focusOnTextEditor = ()=>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.focus();\n        }\n    }\n\n    const applyOptionOnTextEditor = (exec: string, value: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            if(value === ''){\n                iframeRef.current.contentDocument.execCommand(exec);\n            }else{\n                iframeRef.current.contentDocument.execCommand(exec, true, value);\n            }\n        }\n    }\n\n    const openFileInput = ()=>{\n        setInputTagCountState(inputTagCountState + 1);\n        setTimeout(()=>{\n            document.querySelector<HTMLInputElement>(`.decriptionInputFileTag-${inputTagCountState+1}`)?.click();\n        }, 10)\n    }\n\n    const addEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.addEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.addEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const removeEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.removeEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.removeEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const clickAndKeyUpEventOfTextEditor = (e: KeyboardEvent | MouseEvent & {key?: string}) =>{\n\n        if(firstClickOfEditorState){\n            clearTextOnTextEditor();\n            setFirstClickOfEditorState(false);\n        }\n\n        // 텍스트 에디터 (옵션 실시간 체크) 로직\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            const document = iframeRef.current.contentDocument;\n            if(optionsRef.current){\n                optionsRef.current.childNodes.forEach((list: any) => {\n                    if(list.dataset.cmd){\n                        if(document.queryCommandState(list.dataset.cmd)){\n                            list.classList.add('on');\n                        }else{\n                            list.classList.remove('on');\n                        }\n                    } \n                });\n            }\n        }\n\n        // 백스페이스를 눌렀을떄 이미지가 지워졌는지 확인하는 로직\n        if(e.type === \"keyup\"){\n            if(e.key === \"Backspace\"){\n                // imageState - 기존 이미지 지워졌는지 검사\n                textEditorImageState.forEach(image => {\n                    if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(image.filename) === -1){\n                        setTextEditorImageState(textEditorImageState.filter(item => item.filename !== image.filename))\n                    }\n                });\n\n                // textEditorImageFilesState - 신규 이미지 지워졌는지 검사\n                if(inputTagCountState > 0){\n                    for(let i=1; i<=inputTagCountState; i++){\n    \n                        if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(`decriptionImgTag-${i}`) !== -1){\n                            console.log('이미지가 있다.!!')\n                        }else{\n                            console.log('이미지가 없다.!!', textEditorImageFilesState)\n        \n                            if(document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`))\n                            document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`)[0].value = \"\";\n\n                            if(textEditorImageFilesState.length > 0){\n                                setTextEditorImageFilesState(textEditorImageFilesState.filter((file, index) => {\n                                    return index+1 !== i;\n                                }))\n                            }\n                            \n                        }\n                    }\n                }                \n            }\n        }\n\n        setTextEditorContentsState(getTextEditorContentsAfterRemoveTempImgSrc());\n    }\n\n    const clearTextOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = \"\";\n        }\n    }\n\n    const setDefaultOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.designMode = \"on\"\n            iframeRef.current.contentDocument.head.innerHTML \n            = `<style>\n                @import url(\"https://fonts.googleapis.com/earlyaccess/notosanskr.css\");\n            </style>`;\n            iframeRef.current.contentDocument.body.style.fontFamily = 'Noto Sans KR';\n            iframeRef.current.contentDocument.body.style.fontWeight = '400';\n            iframeRef.current.contentDocument.body.style.margin = '0px';\n            const placeholder = \"<div style='color: grey;'>내용을 입력해주세요.</div>\"\n            iframeRef.current.contentDocument.body.innerHTML = placeholder;\n        }\n    }\n\n    const setImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n\n        if(e.currentTarget.files){\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    if(inputTagCountState !== 0){\n                        setInputTagCountState(inputTagCountState-1);\n                    }\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                }else{\n                    setTempImageOnTextEditor(imageFile);\n\n                    if(textEditorImageFilesState === null){\n                        setTextEditorImageFilesState([imageFile]);\n                    }else{\n                        setTextEditorImageFilesState(textEditorImageFilesState.concat(imageFile));\n                    }\n                }   \n            }\n\n        }\n    \n    }\n\n    const setTempImageOnTextEditor = (descriptionImageFile: File)=>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                const imageTag = `<img width='100%' height='auto' class=\".decriptionImgTag-${inputTagCountState}\" src=\"${e.target.result.toString()}\" />`;\n                iframeRef.current?.contentDocument?.execCommand('InsertHTML', false, imageTag);\n                setTextEditorContentsState(getTextEditorContentsAfterRemoveTempImgSrc());\n            }\n        }\n        reader.readAsDataURL(descriptionImageFile);\n        focusOnTextEditor();\n    }\n\n    const verifyImageType = (image: string) =>{\n        const types = ['image/jpeg', 'image/png', 'image/jpg'];\n        if(types.indexOf(image) === -1){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    const getTextEditorContentsAfterRemoveTempImgSrc = () =>{\n        let stringData = iframeRef.current?.contentDocument?.body.innerHTML;\n        stringData = stringData?.replace(/([0-9]\\\"\\s)src=\\\".*?\\\"/gi, \"$1\");\n        return stringData ? stringData : '';\n    }\n\n\n    useEffect(()=>{\n        setDefaultOnTextEditor();\n        window.scrollTo(0, 0);\n\n    }, []);\n\n    useEffect(()=>{\n        if(iframeRef.current && iframeRef.current.contentDocument && textEditorContentsState !== '' && firstClickOfEditorState){\n            iframeRef.current.contentDocument.body.innerHTML = textEditorContentsState;\n            setFirstClickOfEditorState(false);\n        }\n    }, [textEditorContentsState]);\n\n    useEffect(()=>{\n        addEventOnTextEditor();\n        return ()=>{\n            removeEventOnTextEditor();\n        }\n    }, [textEditorImageFilesState, textEditorImageState, firstClickOfEditorState]);\n\n    return (\n        <div className=\"bb-board-write__editor-wrapper\">\n            {[...Array(inputTagCountState)].map((v, key) => <input key={key} className={`decriptionInputFileTag-${key+1}`} type=\"file\" onChange={setImageFile} />)}\n            <ul className=\"bb-board-write__editor-options\" ref={optionsRef}>\n                <li onClick={toggleFontSizeWindow}>\n                    <VscTextSize />\n                    <ul className=\"bb-board-write__editor-font-box\" ref={fontSizeRef}>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '1')}>10px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '2')}>13px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '3')}>16px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '4')}>18px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '5')}>24px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '6')}>32px</li>\n                        <li onClick={(e) => sendOptionToTextEditor('fontSize', '7')}>48px</li>\n                    </ul>\n                </li>\n                <li data-cmd=\"bold\" onClick={(e) => sendOptionToTextEditor('bold', '', e)}><BsTypeBold /></li>\n                <li data-cmd=\"italic\" onClick={(e) => sendOptionToTextEditor('italic', '', e)}><BsTypeItalic /></li>\n                <li data-cmd=\"underline\" onClick={(e) => sendOptionToTextEditor('underline', '', e)}><BsTypeUnderline /></li>\n                <li data-cmd=\"strikethrough\" onClick={(e) => sendOptionToTextEditor('strikethrough', '', e)}><BsTypeStrikethrough /></li>\n                <li data-cmd=\"justifycenter\" onClick={(e) => sendOptionToTextEditor('justifycenter', '', e)}><BsTextCenter /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertunorderedlist', '')}><BsListUl /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertorderedlist', '')}><BsListOl /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('indent', '')}><BsTextIndentLeft /></li>\n                <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('outdent', '')}><BsTextIndentRight /></li>\n                <li onClick={openFileInput}><BsCardImage /></li>\n            </ul>\n            <iframe className=\"bb-board-wrtie__editor\" name=\"boadeditrot\" ref={iframeRef}></iframe>\n        </div>\n    )\n}\n\nexport default TextEditor;","import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './BoardWrite.scss';\nimport path from 'path';\nimport {Redirect, RouteChildrenProps, useHistory} from 'react-router-dom';\nimport useModal from '../../hooks/useModal';\nimport useAuth from '../../hooks/useAuth';\n\nimport TextEditor from '../common/TextEditor';\n\nimport { boardListType, imageStateType } from './BoardHome';\nimport { BsX } from 'react-icons/bs';\n\ntype ParamsType = {\n    id: string;\n}\n\nfunction BoardWrite(props: RouteChildrenProps<ParamsType>){\n\n    const history = useHistory();\n    const {authState} = useAuth();\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const thumbImageRef = useRef<HTMLInputElement>(null);\n    const titleInputRef = useRef<HTMLInputElement>(null);\n\n    const [titleState, setTitleState] = useState('')\n    const [tagsState, setTagsState] = useState<string[]>([]);\n    const [idState, setIdState] = useState('');\n\n    // Thumbnail Image\n    const [tempThumbnailImagePathState, setTempThumbnailImagePathState] = useState('');\n    const [thumbnailImageState, setThumbnailImageState] = useState<imageStateType[]>([]);\n    const [thumbnailImageFilesState, setThumbnailImageFilesState] = useState<File[]>([]);\n    \n\n    // TextEditor\n    const [textEditorContentsState, setTextEditorContentsState] = useState('');\n    const [textEditorImageState, setTextEditorImageState] = useState<imageStateType[]>([]);\n    const [textEditorImageFilesState, setTextEditorImageFilesState] = useState<File[]>([]); // 신규 이미지 확인용\n\n\n\n    const setContentsOnPage = (id:string) =>{\n        axios({\n            method: 'get',\n            url: `/api/board/list/${props.match?.params.id}`\n        }).then((res: {data: boardListType}) =>{\n            console.log('res', res.data);\n\n            setTitleState(res.data.title);\n            setTagsState(res.data.tags[0] === '' ? [] : res.data.tags);\n\n            setThumbnailImageState(res.data.thumbnailImage);\n            setTextEditorImageState(res.data.descriptionImage);\n            setTagsOnViewByData(res.data.tags);\n\n            if(res.data.thumbnailImage.length > 0){\n                setTempThumbnailImagePathState(path.resolve('./uploads', res.data.thumbnailImage[0].filename));\n            }\n\n            setTextEditorContentsState(res.data.description);\n        });\n    }\n\n\n    useEffect(()=>{\n\n        const listId = props.match?.params.id;\n\n        console.log(\"match\", listId);\n        \n        // 수정요청으로 들어올 경우\n        if(listId){\n            setIdState(listId);\n            setContentsOnPage(listId);\n        }\n\n        window.scrollTo(0, 0);\n\n    }, []);\n\n\n    const nullCheckData = (targets: {type: string; target: string;}[]): boolean =>{\n        let passFlag = true;\n      \n        targets.some(item => {\n            console.log('item', item);\n\n            if(item.target === '' || item.target.indexOf('내용을 입력해주세요.') !== -1){\n                onOpenConfirmModal({\n                    status: true,\n                    title: `${item.type} 오류`,\n                    desc: `${item.type}을 입력해 주세요.`,\n                    confirm: {\n                        isShow: true,\n                        func: () => {\n                            onCloseModal();\n                            switch(item.type){\n                                case '제목':\n                                    titleInputRef.current?.focus();\n                                    break;\n                                case '본문':\n                                    if(iframeRef.current?.contentDocument)\n                                        iframeRef.current?.contentDocument.body.focus();\n                                    break;\n                                default:\n                            }\n                        }\n                    }\n                });\n                passFlag = false;\n                return true;\n            }\n        });\n\n        return passFlag;\n       \n    }\n\n    const setFormData = (idState: string) =>{\n        const form = new FormData();\n\n        form.append('title', titleState);\n        form.append('tags', JSON.stringify(tagsState));\n        form.append('description', textEditorContentsState);\n        form.append('writer', '신범근');\n\n        if(idState == ''){ // 신규 등록\n\n            // 썸네일 이미지\n            if(thumbnailImageFilesState){ \n                thumbnailImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('thumbnailImageFile', file);\n                    }\n                });\n            }\n\n            // 본문 이미지     \n            if(textEditorImageFilesState){ \n                textEditorImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImageFile', file);\n                    }\n                })\n            }           \n\n        }else{ // 수정 등록\n            form.append('_id', idState);\n\n            form.append('thumbnailImage', JSON.stringify(thumbnailImageState)); // 기존 이미지 정보\n            form.append('descriptionImage', JSON.stringify(textEditorImageState)); // 기존 이미지 정보\n            \n            // 썸네일 이미지\n            if(thumbnailImageFilesState){ // 이미지를 추가, 변경할때\n                thumbnailImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('thumbnailImageFile', file);\n                    }\n                })\n            }\n\n            // 본문 이미지\n            if(textEditorImageFilesState){ // 이미지를 추가, 변경할때\n                textEditorImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImageFile', file);\n                    }\n                })\n            }\n        }\n\n        return form;\n    }\n\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n\n        const passFlag = nullCheckData([\n                {type: '제목', target: titleState}, \n                {type: '태그', target: tagsState.toString()}, \n                {type: '본문', target: textEditorContentsState}\n            ]);\n\n        \n        if(passFlag){\n            const form = setFormData(idState);\n        \n            if(idState === ''){ // 신규 등록\n                \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'post',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('post_res', res.data[0]);\n                    history.push('/board');\n                });\n    \n            }else{ // 수정 등록\n      \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'put',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('put_res', res.data[0]);\n                    history.push('/board/view?_id=' + idState);\n                });\n            }\n    \n    \n            // 데이터 비우기\n            setTitleState('');\n          \n            setThumbnailImageState([]);\n            setThumbnailImageFilesState([]);\n\n            setTextEditorImageState([]);\n            setTextEditorImageFilesState([]);\n\n            setTextEditorContentsState('');\n        }\n    }\n\n    const setTitleForOnChange = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        const {name, value} = e.target;\n        setTitleState(value);\n    }\n\n    const setTagsData = (e:React.MouseEvent<HTMLSpanElement, MouseEvent>) =>{\n\n        console.log('클릭');\n\n        const classList = e.currentTarget.classList;\n        const innerText = e.currentTarget.innerText;\n\n        if(classList.contains('on')){\n            // 버튼 OFF\n            classList.remove('on');\n            if(tagsState.indexOf(innerText) !== -1){ // 해당 태그가 있을 경우 => 뺸다\n                setTagsState(tagsState.filter(tag => tag !== innerText));\n            }\n        }else{\n            // 버튼 ON\n            classList.add('on');\n            if(tagsState.indexOf(innerText) === -1){ // 해당 태그가 없을 경우 => 더한다\n                setTagsState(tagsState.concat(innerText));\n            }\n        }\n    }\n\n    const setTagsOnViewByData = (initTags:string[]) =>{\n        document.querySelectorAll('.bb-board-write__tags-wrapper > span').forEach(span =>{\n            initTags.forEach(tag =>{\n                if(tag === span.innerHTML){\n                    span.classList.add('on');\n                }\n            })\n        })\n    }\n\n    const setThumbnailImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        if(e.currentTarget.files){\n\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                    setThumbnailImageFilesState([]); // State 초기화\n                }else{\n                    setTempThumbnailImageOnView(imageFile);\n                    setThumbnailImageFilesState(thumbnailImageFilesState.concat(imageFile));\n                }\n            }\n        }\n    }\n\n\n    const setTempThumbnailImageOnView = (thumbImageFile: File) =>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                setTempThumbnailImagePathState(e.target.result.toString());\n            }\n        }\n        reader.readAsDataURL(thumbImageFile);\n    }\n\n    const verifyImageType = (image: string) =>{\n        const types = ['image/jpeg', 'image/png', 'image/jpg'];\n        if(types.indexOf(image) === -1){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    const removeThumbnailImage = () =>{\n        setTempThumbnailImagePathState('');\n        setThumbnailImageState([]);\n        setThumbnailImageFilesState([]);   \n    }\n\n\n    return (\n        <main className=\"bb-board-write__main\">\n            {authState.email !== '' ? (\n                <section className=\"bb-board-write__form-section\">\n                    <form className=\"bb-board-write__form\" onSubmit={onSubmit}>\n                    <input className=\"bb-board-write__title\" ref={titleInputRef} placeholder=\"제목을 입력해주세요.\" type=\"text\" name=\"title\" value={titleState} onChange={setTitleForOnChange}/>\n                    {/* <input className=\"bb-board-write__title--sub\" placeholder=\"소제목을 입력해주세요.\" type=\"text\" name=\"subTitle\" value={boardTitle?.subTitle} onChange={setTitleForOnChange}/> */}\n                    <div className=\"bb-board-write__tags-wrapper\">\n                        <span onClick={setTagsData}>개발</span>\n                        <span onClick={setTagsData}>공부</span>\n                        <span onClick={setTagsData}>생각</span>\n                    </div>\n                    <TextEditor \n                        textEditorContentsState={textEditorContentsState}\n                        setTextEditorContentsState={setTextEditorContentsState}\n                        textEditorImageState={textEditorImageState}\n                        setTextEditorImageState={setTextEditorImageState}\n                        textEditorImageFilesState={textEditorImageFilesState}\n                        setTextEditorImageFilesState={setTextEditorImageFilesState}\n                    />\n                    <div className={`bb-board-write__image-tiles ${tempThumbnailImagePathState !== '' && 'on'}`}>\n                        <span style={{backgroundImage: `url(${tempThumbnailImagePathState})`}} onClick={removeThumbnailImage}><BsX /></span>\n                    </div>\n                    <div className=\"bb-board-write__image-upload-btn\">\n                        <input type=\"file\" ref={thumbImageRef} onChange={setThumbnailImageFile} />\n                        <button type=\"button\" onClick={()=> thumbImageRef.current?.click()}>썸네일 이미지 업로드</button>\n                    </div>\n                    <div className=\"bb-board-write__buttons\">\n                        <button type=\"button\" onClick={() => history.push('/board')}>취소</button>\n                        <button type=\"submit\">완료</button>\n                    </div>\n                    </form>\n                </section>\n            ) : (\n                <Redirect to={`/login?redirect=/board`} />\n            )}\n        </main>\n    )\n}\n\nexport default BoardWrite;","import React, { useCallback, useEffect, useMemo } from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {\n  Header,\n  Footer,\n  Modal,\n  Login,\n  BoardHome,\n  BoardView,\n  BoardWrite\n} from './components';\nimport './App.scss';\nimport axios from 'axios';\nimport useAuth from './hooks/useAuth';\n\nfunction App() {\n\n  const {onLogin} = useAuth();\n\n  const checkLoginStatus = () =>{\n    axios({\n      method: 'get',\n      url: '/api/auth/check'\n    }).then((res) =>{\n      console.log('post_res', res.data);\n      \n      if(res.data.status){ // Yes Login\n        const loginData = {\n          email: res.data.info.email,\n          name: res.data.info.name\n        }\n        onLogin(loginData);\n      }\n    });\n  }\n\n  useEffect(()=>{\n    checkLoginStatus();\n  }, [])\n\n\n\n\n  return (\n    <div className=\"bb-body\">\n      <BrowserRouter>\n        <Header />\n        <Modal />\n        <Switch>\n          <Route exact path=\"/\" component={BoardHome} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/board/write/:id\" component={BoardWrite} />\n          <Route path=\"/board/write\" component={BoardWrite} />\n          <Route path=\"/board/view/:id\" component={BoardView} />\n          <Route path=\"/board\" component={BoardHome} />\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport modal from './modal';\nimport auth from './auth';\n\nconst rootReducer = combineReducers({\n    modal,\n    auth\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}