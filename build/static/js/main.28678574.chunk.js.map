{"version":3,"sources":["assets/images/board/default_thumbnail.jpg","components/common/Header.tsx","components/common/Footer.tsx","modules/modal.ts","hooks/useModal.tsx","components/common/Modal.tsx","components/home/Homepage.tsx","components/board/BoardList.tsx","components/board/BoardHome.tsx","utils/index.ts","components/board/BoardView.tsx","components/board/BoardWrite.tsx","App.tsx","serviceWorker.ts","modules/index.ts","index.tsx"],"names":["module","exports","Header","mobileMenuRef","useRef","subMenuRef","toggleMainMenu","event","status","current","classList","remove","add","toggle","openSubMenu","document","body","addEventListener","bodyFunc","closeSubMenu","removeEventListener","e","console","log","srcElement","className","flag","forEach","val","index","baseVal","useMemo","window","onClick","to","contains","ref","Footer","OPEN","CLOSE","initialState","title","desc","confirm","isShow","func","modal","state","action","type","payload","useModal","modalState","useSelector","dispatch","useDispatch","onOpenModal","useCallback","data","openModal","onOpenConfirmModal","openConfirmModal","onCloseModal","Modal","modalEl","useState","modalData","setModalData","useEffect","closeWindow","defaultProps","Homepage","BoardList","setTags","date","setDate","defaultThumbnail","thumbImg","setThumbImg","checkDate","toString","length","tags","images","thumbnailImage","path","resolve","filename","timeStamp","_id","substring","Date","parseInt","year","getUTCFullYear","month","getUTCMonth","day","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","dateForm","map","tag","key","writer","style","backgroundImage","BoardHome","boardList","setBoardList","tagFilter","querySelectorAll","list","currentTarget","targetTag","innerText","getListFromDB","then","res","filterdList","filter","indexOf","axios","method","url","scrollTo","x","getQueryString","search","searchArray","split","searchJson","values","BoardView","urlParams","description","descriptionImage","listData","setListData","thumbnailImageState","setThumbnailImageState","history","useHistory","searchVal","location","searchData","params","dangerouslySetInnerHTML","__html","push","BoardWrite","titleState","setTitleState","tagsState","setTagsState","idState","setIdState","imageState","setImageState","firstClickOfEditorState","setFirstClickOfEditorState","tempThumbnailImagePathState","setTempThumbnailImagePathState","thumbnailImageFileState","setThumbnailImageFileState","descriptionImageFilesState","setDescriptionImageFilesState","inputTagCountState","setInputTagCountState","iframeRef","optionsRef","thumbImageRef","titleInputRef","focusOnTextEditor","contentDocument","focus","sendOptionToTextEditor","exec","value","toggleButtonStatus","execCommand","applyOptionOnTextEditor","clickAndKeyUpEventOfTextEditor","clearTextOnTextEditor","childNodes","dataset","cmd","queryCommandState","image","innerHTML","item","i","file","fontSizeRef","setContentsOnPage","id","text","setTagsOnViewByData","designMode","head","fontFamily","fontWeight","margin","setDefaultOnTextEditor","queryString","removeEventOnTextEditor","addEventOnTextEditor","contentWindow","getTextEditorContents","stringData","setFormData","form","FormData","append","JSON","stringify","replace","getTextEditorContentsAfterRemoveTempImgSrc","setTagsData","concat","initTags","span","setTempThumbnailImageOnView","thumbImageFile","reader","FileReader","onload","target","result","readAsDataURL","verifyImageType","setDescriptionImageFile","files","imageFile","setTempDescriptImageOnTextEditor","descriptionImageFile","imageTag","onSubmit","preventDefault","targets","passFlag","some","nullCheckData","headers","Array","v","onChange","placeholder","name","data-cmd","setTimeout","querySelector","click","App","exact","component","Boolean","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28678574.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default_thumbnail.08a1cc29.jpg\";","import React, {useRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport {BiMenu, BiUser} from 'react-icons/bi';\nimport './Header.scss';\n\nfunction Header(){\n\n    const mobileMenuRef = useRef<HTMLUListElement>(null);\n    const subMenuRef = useRef<HTMLDivElement>(null);\n\n\n    // MainMenu 모바일에서 메뉴 펄치기 버튼\n    const toggleMainMenu = (event: any , status: Number = 2) =>{\n        if(mobileMenuRef.current){\n            switch(status){\n                case 0: // close\n                    mobileMenuRef.current.classList.remove('on');\n                    break;\n                case 1: // open\n                    mobileMenuRef.current.classList.add('on');\n                    break;\n                case 2: // toggle\n                    mobileMenuRef.current.classList.toggle('on');\n                    break;\n            }\n        }           \n    }\n    // SubMenu 데스크탑/모바일 마이페이지 아이콘 버튼\n    const toggleSubMenu = () =>{\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            // console.log('classList', classList);\n            if(classList.contains('on')){\n                closeSubMenu();\n            }else{\n                openSubMenu();\n            }\n        }\n    }\n\n    const openSubMenu = () =>{\n        // console.log(\"openSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.add('on');\n            document.body.addEventListener('click', bodyFunc);\n        }\n    }\n\n    const closeSubMenu = () =>{\n        // console.log(\"closeSubMenu 작동\");\n        if(subMenuRef.current){\n            const classList = subMenuRef.current.classList\n            classList.remove('on');\n            document.body.removeEventListener('click', bodyFunc);\n        }\n    }\n\n    const bodyFunc = (e: any) =>{\n        console.log('bodyevent 실행', e.srcElement.className);\n        const exClassName = [\n            'bb-header__sub-menu-box-ul',\n            'bb-header__sub-menu-box-li'\n        ];\n        let flag = true;\n\n\n        exClassName.forEach((val, index)=>{\n            if(e.srcElement.className === val || e.srcElement.className.baseVal === 'icon-user'){\n                flag = false;\n            }\n        });\n\n        if(flag){\n            closeSubMenu();\n        }\n    }\n\n    useMemo(()=>{\n        window.addEventListener('resize', ()=>{\n            mobileMenuRef.current?.classList.remove('on');\n            subMenuRef.current?.classList.remove('on');\n        });\n    }, []);\n\n    return (\n        <nav className=\"bb-header__nav\">\n            <div className=\"bb-header__menu--desktop\">\n                <div className=\"bb-header__mobile-menu-btn\" onClick={(e) => toggleMainMenu(e, 2)}><BiMenu className=\"icon-menu\" /></div>\n                <div className=\"bb-header__logo-btn\" onClick={(e) => toggleMainMenu(e, 0)}><Link className=\"text-black \" to=\"/\">Bumblog</Link></div>\n                <div className=\"bb-header__desktop-menu-wrapper\">\n                    <ul className=\"bb-header__desktop-menu\">\n                      <li></li>\n                    </ul>\n                    <div className=\"bb-header__sub-menu\">\n                        <div className=\"bb-header__sub-menu-icon\" onClick={toggleSubMenu}><BiUser className=\"icon-user\" /></div>\n                        <div className=\"bb-header__sub-menu-box\" ref={subMenuRef}>\n                            <div className=\"edge-wrapper\">\n                                <div className=\"edge\"></div>\n                            </div>\n                            <ul className=\"bb-header__sub-menu-box-ul\">\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                                <li className=\"bb-header__sub-menu-box-li\">1번 메뉴</li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"bb-header__mobile-menu-wrapper\">\n                <ul className=\"bb-header__mobile-menu\" ref={mobileMenuRef}>\n                    <li onClick={(e) => toggleMainMenu(e, 0)}><Link to=\"/board\">MENU-1</Link></li>\n                    <li>MENU-2</li>\n                    <li>MENU-3</li>\n                    <li>MENU-4</li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer(){\n    return (\n        <footer className=\"bb-common__footer\">\n            <div className=\"bb-common__footer-contents-wrapper\">\n                <div className=\"bb-common__footer-copyright\">\n                    <div>Copyright © 2020 Bumblog Inc. All rights reserved</div>\n                </div>\n                <div className=\"text-bold\">Bumblog</div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","const OPEN = 'modal/open' as const;\nconst OPEN_CONFIRM = 'modal/open_confirm' as const;\nconst CLOSE = 'modal/close' as const;\n\n\nexport type ModalDataType = {\n    status: boolean;\n    title: string;\n    desc: string;\n    confirm: {\n        isShow: boolean;\n        func?: () => void;\n    };\n}\n\nexport const openModal = (data: ModalDataType) =>({\n    type: OPEN,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: data.confirm.isShow,\n        }\n    }\n\n});\n\nexport const openConfirmModal = (data: ModalDataType) =>({\n    type: OPEN_CONFIRM,\n    payload: {\n        title: data.title,\n        desc: data.desc,\n        confirm: {\n            isShow: data.confirm.isShow,\n            func: data.confirm.func\n        }\n    }\n});\n\nexport const closeModal = () =>({\n    type: CLOSE\n})\n\ntype ModalAction = \n    | ReturnType<typeof openModal>\n    | ReturnType<typeof openConfirmModal>\n    | ReturnType<typeof closeModal>\n\n// type ModalState = {\n//     status: boolean;\n//     title: string;\n//     desc: string;\n//     confirm: {\n//         isShow: boolean;\n//         func: () => void;\n//     }\n// }\n\nconst initialState: ModalDataType = {\n    status: false,\n    title: '',\n    desc: '',\n    confirm: {\n        isShow: false,\n        func: () => {}\n    }\n}\n\nfunction modal(state: ModalDataType = initialState, action: ModalAction): ModalDataType{\n    switch(action.type){\n        case OPEN:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                }\n            }\n        case OPEN_CONFIRM:\n            return {\n                status: true, \n                title: action.payload.title,\n                desc: action.payload.desc,\n                confirm: {\n                    isShow: action.payload.confirm.isShow,\n                    func: action.payload.confirm.func\n                }\n            }\n        case CLOSE:\n            return {\n                ...state,\n                status: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default modal;","import { useSelector, useDispatch } from 'react-redux';\nimport {RootState} from '../modules';\nimport {openModal, openConfirmModal, closeModal} from '../modules/modal';\nimport { useCallback } from 'react';\n\nfunction useModal(){\n    const modalState = useSelector((state:RootState) => state.modal);\n    const dispatch = useDispatch();\n\n    const onOpenModal = useCallback((data)=>{\n        dispatch(openModal(data));\n    }, [dispatch]);\n\n    const onOpenConfirmModal = useCallback((data)=>{\n        dispatch(openConfirmModal(data));\n    }, [dispatch]);\n\n    const onCloseModal = useCallback(()=>{\n        dispatch(closeModal());\n    }, [dispatch]);\n\n    return {\n        modalState,\n        onOpenModal,\n        onOpenConfirmModal,\n        onCloseModal\n    }\n}\n\nexport default useModal;","import React, { useRef, useState, useEffect } from 'react';\nimport './Modal.scss';\nimport useModal from '../../hooks/useModal';\nimport {ModalDataType} from '../../modules/modal';\nimport {BsX} from 'react-icons/bs';\n\nfunction Modal({data} : {data: ModalDataType}){\n\n    const {modalState, onCloseModal} = useModal();\n    const modalEl = useRef<HTMLDivElement>(null);\n    const [modalData, setModalData] = useState<ModalDataType>(data);\n\n    useEffect(function(){\n        setModalData(modalState);\n    }, [modalState]);\n\n    const closeWindow = () =>{\n        onCloseModal();\n    }\n\n    return (\n        <div className={`bb-modal__body ${modalData.status && 'on'}`} ref={modalEl}>\n            <div className=\"bb-modal__dim\" onClick={closeWindow}></div>\n            <div className=\"bb-modal__window\">\n                <div className=\"bb-modal__window-close-btn\" onClick={closeWindow}><BsX className=\"bb-modal__window-corss-icon\" /></div>\n                <div>\n                    <h2 className=\"bb-modal__window-title\">{modalData.title}</h2>\n                    <div className=\"bb-modal__window-desc\">\n                        {modalData.desc}\n                    </div>\n                    <div className={`bb-modal__window-btns ${modalData.confirm.isShow && 'on'}`}>\n                        <button onClick={closeWindow}>아니오</button>\n                        <button onClick={modalData.confirm.func}>예</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nModal.defaultProps = {\n    data: {\n        status: false,\n        title: '',\n        desc: '',\n        confirm: {\n          isShow: false\n        }\n    }\n}\n\nexport default Modal;","import React from 'react';\nimport {BiChevronRight} from 'react-icons/bi';\nimport './Homepage.scss';\nimport {Link} from 'react-router-dom';\n\nfunction Homepage(){\n    return (\n        <main className=\"bg-hp-main\">\n            <section>\n                <div className=\"bg-hp-hero\">\n                    <div className=\"bg-hp-copy-wrapper\">\n                        <div className=\"bg-hp-copy\">\n                            <h1>BeomGeun&nbsp;Shin</h1>\n                            <div className=\"text-medium text-grey\">Front-End Developer</div>\n                            <div className=\"bg-hp-desc\">\n                                <Link className=\"link\" to=\"/board\">이력서 보기<BiChevronRight className=\"icon-chevronright\" /></Link>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"bg-hp-hero-img-wrapper\">\n                        <figure className=\"bg-hp-hero-img\"></figure>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bg-hp-grid\">\n                <div className=\"bg-hp-grid-wrapper\">\n                    <ul className=\"bg-hp-table\">\n                        <li className=\"bg-hp-list merge-row bb-homme__site-intro\">\n                            <div className=\"bg-hp-banner\">\n                                <h1>사이트 소개</h1>\n                                <div>\n                                    본 사이트는 React, Redux, express, RESTful API, mongodb로 이루어져&nbsp;있습니다.\n                                </div>\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>이력서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>자기소개서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                        <li className=\"bg-hp-list\">\n                            <h2>경력기술서</h2>\n                            <div>\n                                Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquid aspernatur rerum a id rem eligendi odio, blanditiis veritatis laboriosam explicabo suscipit iste obcaecati dolorum consectetur quo consequatur deleniti cum. Vitae!\n                            </div>\n                        </li>\n                    </ul>   \n                </div>\n            </section>\n        </main>\n    )\n}\n\nexport default Homepage;","import React, { useEffect, useState } from 'react';\nimport {boardListType} from './BoardHome';\nimport {Link} from 'react-router-dom';\nimport path from 'path';\nimport './BoardList.scss';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\n\nfunction BoardList({data}: {data: boardListType}){\n\n    // console.log('data', data);\n\n    const [tags, setTags] = useState<string[]>([]);\n    const [date, setDate] = useState('');\n    const [thumbImg, setThumbImg] = useState(defaultThumbnail);\n\n    const dateForm = () =>{\n        const timeStamp = data._id.toString().substring(0,8);\n        const date = new Date(parseInt(timeStamp, 16) * 1000);\n\n        const year = date.getUTCFullYear(); // 2020\n        const month = checkDate(date.getUTCMonth());\n        const day = checkDate(date.getUTCDay());\n        const hour = checkDate(date.getUTCHours());\n        const minutes = checkDate(date.getUTCMinutes());\n        const seconds = checkDate(date.getUTCSeconds());\n\n        // return `${year}.${month}.${day} ${hour}:${minutes}:${seconds}`;\n        return `${year}.${month}.${day}`;\n    }\n\n    const checkDate = (date:number) =>{\n        if(date.toString().length === 1){\n            return \"0\" + date.toString();\n        }else{\n            return date.toString();\n        }\n    };\n\n    useEffect(()=>{\n        setTags(data.tags);\n\n        if(data.images.thumbnailImage.length > 0){\n            setThumbImg(path.resolve('./uploads', data.images.thumbnailImage[0].filename));\n        }\n\n        setDate(dateForm());\n    }, []);\n\n    return (\n            <li className=\"bb-board-list__body\">\n                <Link to={`/board/view?_id=${data._id}`}>\n                    <div className=\"bb-board-list__contents-wrapper\">\n                        <div className=\"bb-board-list__article-wrapper\">\n                            <div>\n                                <div className=\"bb-board-list__article-title\">{data.title}</div>\n                                <div className=\"bb-board-list__article-tags\">\n                                    {data.tags.map((tag, index) => <span key={index}>{tag}</span>)}\n                                </div>\n                            </div>\n                            \n                            {/* <div className=\"bb-board-list__article-description\" dangerouslySetInnerHTML={{__html: data.description}}></div> */}\n                            <ul className=\"bb-board-list__article-extra-info\">\n                                <li>{date}</li>\n                                <li>{data.writer}</li>\n                            </ul>\n                        </div>\n                        <div>\n                            <figure className=\"bb-board-list__image\" style={{backgroundImage: `url(${thumbImg})`}}/>\n                        </div>\n                    </div>\n                </Link>\n            </li>\n        \n    )\n}\n\nexport default BoardList;","import React, { useEffect, useState } from 'react';\nimport './BoardHome.scss';\nimport BoardList from './BoardList';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport {BsPencilSquare} from 'react-icons/bs';\nimport useModal from '../../hooks/useModal';\n\nexport type boardListType = {\n    _id: string;\n    tags: string[];\n    title: string;\n    description: string;\n    writer: string;\n    images: boardListImagesType;\n}\n\nexport type boardListImagesType = {\n    thumbnailImage: {\n        originalname: string;\n        filename: string;\n    }[];\n    descriptionImage: {\n        originalname: string;\n        filename: string;\n    }[];\n}\n\n\nfunction BoardHome(){\n\n\n    const {modalState} = useModal();\n\n    const [boardList, setBoardList] = useState<boardListType[]>([]);\n    const tagFilter = (e:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n\n        // 버튼 초기화\n        document.querySelectorAll('.bb-board-home__tags-ul > li').forEach((list)=>{\n            list.classList.remove('on');\n        });\n\n        // 버튼 표시\n        e.currentTarget.classList.add('on');\n\n        // 데이터 불러오고 => 필터 적용\n        const targetTag = e.currentTarget.innerText;\n\n        getListFromDB().then((res) => {\n            if(targetTag === '모두'){\n                setBoardList(res.data)\n            }else{\n                const filterdList = res.data.filter((list:boardListType) => list.tags.indexOf(targetTag) !== -1);\n                setBoardList(filterdList);\n            }\n        });\n    }\n\n    const getListFromDB = () =>{\n        return axios({\n            method: 'get',\n            url: '/api/board/list'\n        });\n    }\n\n    useEffect(()=>{\n        // console.log('BoardHome-useEffect 실행');\n        getListFromDB().then((res) =>{\n            // console.log('data', res.data);\n            setBoardList(res.data);\n        });\n\n        window.scrollTo(0, 0);\n\n    }, []);\n\n\n    return (\n        <main className=\"bb-board-home__main\">\n            <section className=\"bb-board-home__hero-section\">\n                <div>\n                    <h1>Bumblog</h1>\n                    <div className=\"bb-board-home__hero-desc\">\n                        생각나는 것을 기록하고 저장하는 공간\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__tags-section\">\n                <div>\n                    <ul className=\"bb-board-home__tags-ul\">\n                        <li className=\"on\" onClick={tagFilter}>모두</li>\n                        <li onClick={tagFilter}>개발</li>\n                        <li onClick={tagFilter}>공부</li>\n                        <li onClick={tagFilter}>생각</li>\n                    </ul>\n                </div>\n            </section>\n            <section className=\"bb-board-home__write-button-section\">\n                <div className=\"bb-board-home__btns-wrapper\">\n                    <div>&nbsp;</div>\n                    <div>\n                        <Link className=\"bb-board-home__icon-wrapper\" to=\"/board/write\">\n                            <BsPencilSquare className=\"bb-board-home__write-icon\" />&nbsp;글쓰기\n                        </Link>\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-home__list-section\">\n                <ul className=\"bb-board-home__list-ul-tag\">\n                    {boardList.map(x => <BoardList key={x._id} data={x} />)}\n                </ul>\n            </section>\n            \n        </main>\n    )\n}\n\nexport default BoardHome;","export const getQueryString = (search: string) =>{\n    let searchArray = search.substring(1).split('&');\n    let searchJson: any = {};\n    searchArray.forEach(function(val){\n        const values = val.split('=')\n        searchJson[values[0]] = values[1];\n    });\n\n    return searchJson;\n}\n","import React, { useEffect, useState } from 'react';\nimport {Link} from 'react-router-dom';\nimport './BoardView.scss';\nimport axios from 'axios';\nimport {getQueryString} from '../../utils';\nimport {boardListType} from './BoardHome';\nimport {useHistory} from 'react-router-dom';\nimport defaultThumbnail from '../../assets/images/board/default_thumbnail.jpg';\nimport {BsPencilSquare, BsTrash} from 'react-icons/bs'\nimport path from 'path';\nimport useModal from '../../hooks/useModal';\n\nfunction BoardView(urlParams: any){\n\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const [listData, setListData] = useState<boardListType>({\n        _id: '',\n        tags: [],\n        title: '',\n        description: '',\n        writer: '',\n        images: {\n            thumbnailImage: [],\n            descriptionImage: []\n        }\n    });\n\n    const [thumbnailImageState, setThumbnailImageState] = useState('');\n    let history = useHistory();\n    \n    useEffect(()=>{\n        console.log('useEffect');\n        const searchVal = urlParams.location.search;\n        const searchData = getQueryString(searchVal);\n        window.scrollTo(0, 0);\n       \n        axios({\n            method: 'get',\n            url: '/api/board/list',\n            params: searchData\n        }).then((res) =>{\n            console.log('res', res.data);\n            if(res.data){\n                setListData(res.data);\n\n                const thumbnailImage = res.data.images.thumbnailImage[0];\n                if(thumbnailImage){\n                    setThumbnailImageState(path.resolve('./uploads', thumbnailImage.filename));\n                }else{\n                    setThumbnailImageState(defaultThumbnail);   \n                }\n                \n            }\n        });\n    }, []);\n\n\n    const handleDelete = () =>{\n\n        onOpenConfirmModal({\n            status: true,\n            title: '정말 삭제하시겠습니까?',\n            desc: '삭제한 데이터는 복원할 수 없습니다.',\n            confirm: {\n                isShow: true,\n                func: () => {\n                    axios({\n                        method: 'delete',\n                        url: '/api/board/list',\n                        data: listData\n                    }).then((res) =>{\n                        console.log('deleteRes', res.data);\n                        onCloseModal();\n                        history.push('/board');\n                    });\n                }\n            }\n        });\n        \n    }\n\n\n    return (\n        <main className=\"bb-board-view__main\">\n            <section className=\"bb-board-view__hero-section\" style={{backgroundImage: `url(${thumbnailImageState})`}}>\n                <div className=\"bb-board-view__hero-section-title-wrapper\">\n                    <h1>{listData?.title}</h1>\n                    <div className=\"bb-board-view__subtitle\">\n                        {/* {listData?.subTitle} */}\n                    </div>\n                </div>\n            </section>\n            <section className=\"bb-board-view__article-section\">\n                <article className=\"bb-board-view__article tui-editor-contents\" dangerouslySetInnerHTML={{__html: listData.description}}></article>\n            </section>\n            <section className=\"bb-board-view__buttons-section\">\n                <ul className=\"bb-board-view__update-btns\">\n                    <li>\n                        <button>\n                            <Link to={`/board/write?_id=${listData._id === null ? '' : listData._id}`}>\n                                <BsPencilSquare className=\"bb-board-view__pencil-icon\" />\n                            </Link>\n                        </button>\n                    </li>\n                    <li>\n                        <button onClick={handleDelete}>\n                            <BsTrash className=\"bb-board-view__tresh-icon\" />\n                        </button>\n                    </li>\n                </ul>\n            </section>\n        </main>\n    );\n}\n\nexport default BoardView;","import React, { useRef, useState, useEffect, createElement } from 'react';\nimport axios from 'axios';\n\nimport './BoardWrite.scss';\nimport path from 'path';\nimport {useHistory} from 'react-router-dom';\nimport {getQueryString} from '../../utils';\nimport useModal from '../../hooks/useModal';\n\nimport {\n    BsTypeBold, \n    BsTypeItalic,\n    BsTypeUnderline,\n    BsTypeStrikethrough,\n    BsListUl,\n    BsListOl,\n    BsTextIndentLeft,\n    BsTextIndentRight,\n    BsTextCenter,\n    BsX,\n    BsCardImage\n\n} from 'react-icons/bs';\nimport {VscTextSize} from 'react-icons/vsc';\nimport { boardListType, boardListImagesType } from './BoardHome';\n\nfunction BoardWrite(urlParams: any){\n\n    const {onOpenConfirmModal, onCloseModal} = useModal();\n\n    const [titleState, setTitleState] = useState('')\n    const [tagsState, setTagsState] = useState<string[]>([]);\n    const [idState, setIdState] = useState('');\n    const [imageState, setImageState] = useState<boardListImagesType>({\n        thumbnailImage: [],\n        descriptionImage:[]\n    });\n    const [firstClickOfEditorState, setFirstClickOfEditorState] = useState(true);\n\n    const [tempThumbnailImagePathState, setTempThumbnailImagePathState] = useState('');\n    const [thumbnailImageFileState, setThumbnailImageFileState] = useState<File | null>(null); \n    const [descriptionImageFilesState, setDescriptionImageFilesState] = useState<(File | null)[] | null>(null);\n\n    const [inputTagCountState, setInputTagCountState] = useState(0);\n\n    type imageNameType = {\n        originalname: string;\n        filename: string;\n    }\n\n    let history = useHistory();\n\n    const iframeRef = useRef<HTMLIFrameElement>(null);\n    const optionsRef = useRef<HTMLUListElement>(null);\n    const thumbImageRef = useRef<HTMLInputElement>(null);\n    const titleInputRef = useRef<HTMLInputElement>(null);\n\n\n    const toggleButtonStatus = (event:React.MouseEvent<HTMLLIElement, MouseEvent> | undefined) =>{\n        if(event){\n            event.currentTarget.classList.toggle('on');\n        }\n    }\n\n    const applyOptionOnTextEditor = (exec: string, value: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            if(value === ''){\n                iframeRef.current.contentDocument.execCommand(exec);\n            }else{\n                iframeRef.current.contentDocument.execCommand(exec, true, value);\n            }\n        }\n    }\n\n    const focusOnTextEditor = ()=>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.focus();\n        }\n    }\n\n    // 텍스트 에디터 (옵션) 로직\n    const sendOptionToTextEditor = (exec: string, value: string, event?:React.MouseEvent<HTMLLIElement, MouseEvent>) =>{\n\n        toggleButtonStatus(event);\n        applyOptionOnTextEditor(exec, value);\n        focusOnTextEditor();\n    }\n\n\n    const clickAndKeyUpEventOfTextEditor = (e: KeyboardEvent | MouseEvent & {key?: string}) =>{\n\n        if(firstClickOfEditorState){\n            clearTextOnTextEditor();\n            setFirstClickOfEditorState(false);\n        }\n\n\n        // 텍스트 에디터 (옵션 실시간 체크) 로직\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            const document = iframeRef.current.contentDocument;\n            if(optionsRef.current){\n                optionsRef.current.childNodes.forEach((list: any) => {\n                    if(list.dataset.cmd){\n                        if(document.queryCommandState(list.dataset.cmd)){\n                            list.classList.add('on');\n                        }else{\n                            list.classList.remove('on');\n                        }\n                    } \n                });\n            }\n        }\n\n        // 백스페이스를 눌렀을떄 이미지가 지워졌는지 확인하는 로직\n        if(e.type === \"keyup\"){\n            if(e.key === \"Backspace\"){\n                // imageState - 기존 이미지 지워졌는지 검사\n                imageState.descriptionImage.forEach(image => {\n                    if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(image.filename) === -1){\n                        setImageState({\n                            ...imageState,\n                            descriptionImage: imageState.descriptionImage.filter(item => item.filename !== image.filename)\n                        });\n\n                    }\n                });\n\n                // descriptionImageFilesState - 신규 이미지 지워졌는지 검사\n                if(inputTagCountState > 0){\n                    for(let i=1; i<=inputTagCountState; i++){\n    \n                        if(iframeRef.current?.contentDocument?.body.innerHTML.indexOf(`decriptionImgTag-${i}`) !== -1){\n                            console.log('이미지가 있다.!!')\n                        }else{\n                            console.log('이미지가 없다.!!', descriptionImageFilesState)\n        \n                            if(document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`))\n                            document.querySelectorAll<HTMLInputElement>(`.decriptionInputFileTag-${i}`)[0].value = \"\";\n\n                            if(descriptionImageFilesState && descriptionImageFilesState.length > 0){\n                                setDescriptionImageFilesState(descriptionImageFilesState.map((file, index) => {\n                                    if(index+1 === i){\n                                        return null;\n                                    }else{\n                                        return file;\n                                    }\n                                    \n                                }))\n                            }\n                            \n                        }\n                    }\n                }                \n            }\n        }\n        \n       \n    }\n\n    const fontSizeRef = useRef<HTMLUListElement>(null);\n\n    // 텍스트 에디터 폰트사이즈 윈도우 토글\n    const toggleFontSizeWindow = () =>{\n        if(fontSizeRef.current){\n            fontSizeRef.current.classList.toggle('on');\n        }\n    }\n\n    const setTextOnTextEditor = (text: string) =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = text;\n        }\n    }\n\n    const setDefaultOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.designMode = \"on\"\n            iframeRef.current.contentDocument.head.innerHTML \n            = `<style>\n                @import url(\"https://fonts.googleapis.com/earlyaccess/notosanskr.css\");\n            </style>`;\n            iframeRef.current.contentDocument.body.style.fontFamily = 'Noto Sans KR';\n            iframeRef.current.contentDocument.body.style.fontWeight = '400';\n            iframeRef.current.contentDocument.body.style.margin = '0px';\n            const placeholder = \"<div style='color: grey;'>내용을 입력해주세요.</div>\"\n            iframeRef.current.contentDocument.body.innerHTML = placeholder;\n        }\n    }\n\n    const setContentsOnPage = (id:string) =>{\n        axios({\n            method: 'get',\n            url: '/api/board/list',\n            params: {\n                _id: id\n            }\n        }).then((res: {data: boardListType}) =>{\n            console.log('res', res.data);\n\n            setTitleState(res.data.title);\n            setTagsState(res.data.tags[0] === '' ? [] : res.data.tags);\n            setImageState(res.data.images);\n\n            setTagsOnViewByData(res.data.tags);\n\n            if(res.data.images.thumbnailImage.length > 0){\n                setTempThumbnailImagePathState(path.resolve('./uploads', res.data.images.thumbnailImage[0].filename));\n            }\n\n            setTextOnTextEditor(res.data.description);\n        });\n    }\n\n    useEffect(()=>{\n        setDefaultOnTextEditor();\n\n        const queryString = getQueryString(urlParams.location.search);\n        \n        // 수정요청으로 들어올 경우\n        if(queryString._id){\n            setIdState(queryString._id);\n            setContentsOnPage(queryString._id);\n            setFirstClickOfEditorState(false);\n        }\n\n        window.scrollTo(0, 0);\n\n        return ()=>{\n            removeEventOnTextEditor();\n        }\n\n    }, []);\n\n    useEffect(()=>{\n        addEventOnTextEditor();\n        return ()=>{\n            removeEventOnTextEditor();\n        }\n    }, [descriptionImageFilesState, imageState, firstClickOfEditorState]);\n\n\n\n    const addEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.addEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.addEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n    const removeEventOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentWindow){\n            iframeRef.current.contentWindow.removeEventListener('keyup', clickAndKeyUpEventOfTextEditor);\n            iframeRef.current.contentWindow.removeEventListener('click', clickAndKeyUpEventOfTextEditor);\n        }\n    }\n\n\n    const clearTextOnTextEditor = () =>{\n        if(iframeRef.current && iframeRef.current.contentDocument){\n            iframeRef.current.contentDocument.body.innerHTML = \"\";\n        }\n    }\n\n    const getTextEditorContentsAfterRemoveTempImgSrc = () =>{\n        let stringData = iframeRef.current?.contentDocument?.body.innerHTML;\n        stringData = stringData?.replace(/([0-9]\\\"\\s)src=\\\".*?\\\"/gi, \"$1\");\n        // \"<img src='dasd' />dassadsdads<img src='dasd' />\".replace(/src='.*?\\'/gi, \"\")\n        // \"<img class\\\".decriptionImgTag-1\\\" src=\\\"adasddsasdadas\\\" />\".replace(/([0-9]\\\"\\s)src=\\\".*?\\\"/gi, \"$1\");\n        return stringData ? stringData : '';\n    }\n\n    const getTextEditorContents = ()=>{\n        let stringData = iframeRef.current?.contentDocument?.body.innerHTML;\n        return stringData ? stringData : '';\n    }\n\n\n    const nullCheckData = (targets: {type: string; target: string;}[]): boolean =>{\n        let passFlag = true;\n\n        console.log('targets', targets);\n      \n        targets.some(item => {\n            console.log('item', item);\n\n            if(item.target === '' || item.target.indexOf('내용을 입력해주세요.') !== -1){\n                onOpenConfirmModal({\n                    status: true,\n                    title: `${item.type} 오류`,\n                    desc: `${item.type}을 입력해 주세요.`,\n                    confirm: {\n                        isShow: true,\n                        func: () => {\n                            onCloseModal();\n                            switch(item.type){\n                                case '제목':\n                                    titleInputRef.current?.focus();\n                                    break;\n                                case '본문':\n                                    if(iframeRef.current?.contentDocument)\n                                        iframeRef.current?.contentDocument.body.focus();\n                                    break;\n                                default:\n                            }\n                        }\n                    }\n                });\n                passFlag = false;\n                return true;\n            }\n        });\n\n        return passFlag;\n       \n    }\n\n    const setFormData = (idState: string) =>{\n        const form = new FormData();\n\n        form.append('title', titleState);\n        form.append('tags', JSON.stringify(tagsState));\n        form.append('description', getTextEditorContentsAfterRemoveTempImgSrc());\n        form.append('writer', '신범근');\n\n        if(idState == ''){ // 신규 등록\n\n            // 썸네일 이미지\n            if(thumbnailImageFileState){ \n                form.append('thumbnailImage', thumbnailImageFileState);\n            }\n\n            // 본문 이미지     \n            if(descriptionImageFilesState){ \n                descriptionImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImage', file);\n                    }\n                })\n            }           \n\n        }else{ // 수정 등록\n            form.append('_id', idState);\n            form.append('images', JSON.stringify(imageState)); // 기존 이미지 정보\n            \n            // 썸네일 이미지\n            if(thumbnailImageFileState){ // 이미지를 추가, 변경할때\n                form.append('thumbnailImage', thumbnailImageFileState);\n            }\n\n            // 본문 이미지\n            if(descriptionImageFilesState){ // 이미지를 추가, 변경할때\n                descriptionImageFilesState.forEach(file =>{\n                    if(file){\n                        form.append('descriptionImage', file);\n                    }\n                })\n            }\n        }\n\n        return form;\n    }\n\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) =>{\n        e.preventDefault();\n\n        const passFlag = nullCheckData([\n                {type: '제목', target: titleState}, \n                {type: '태그', target: tagsState.toString()}, \n                {type: '본문', target: getTextEditorContents()}\n            ]);\n\n        \n        if(passFlag){\n            const form = setFormData(idState);\n        \n            if(idState === ''){ // 신규 등록\n                \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'post',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('post_res', res.data[0]);\n                    history.push('/board');\n                });\n    \n            }else{ // 수정 등록\n      \n                axios({\n                    headers: {'Content-Type': 'multipart/form-data'},\n                    method: 'put',\n                    url: '/api/board/list',\n                    data: form\n                }).then((res) =>{\n                    console.log('put_res', res.data[0]);\n                    history.push('/board/view?_id=' + idState);\n                });\n            }\n    \n    \n            // 데이터 비우기\n            setTitleState('');\n            setImageState({\n                thumbnailImage: [],\n                descriptionImage:[]\n            });\n            setThumbnailImageFileState(null);\n            setDescriptionImageFilesState(null);\n    \n            clearTextOnTextEditor();\n        }\n    }\n\n    const setTitleForOnChange = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        const {name, value} = e.target;\n        setTitleState(value);\n    }\n\n    const setTagsData = (e:React.MouseEvent<HTMLSpanElement, MouseEvent>) =>{\n\n        console.log('클릭');\n\n        const classList = e.currentTarget.classList;\n        const innerText = e.currentTarget.innerText;\n\n        if(classList.contains('on')){\n            // 버튼 OFF\n            classList.remove('on');\n            if(tagsState.indexOf(innerText) !== -1){ // 해당 태그가 있을 경우 => 뺸다\n                setTagsState(tagsState.filter(tag => tag !== innerText));\n            }\n        }else{\n            // 버튼 ON\n            classList.add('on');\n            if(tagsState.indexOf(innerText) === -1){ // 해당 태그가 없을 경우 => 더한다\n                setTagsState(tagsState.concat(innerText));\n            }\n        }\n    }\n\n    const setTagsOnViewByData = (initTags:string[]) =>{\n        document.querySelectorAll('.bb-board-write__tags-wrapper > span').forEach(span =>{\n            initTags.forEach(tag =>{\n                if(tag === span.innerHTML){\n                    span.classList.add('on');\n                }\n            })\n        })\n    }\n\n    const setThumbnailImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n        if(e.currentTarget.files){\n\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                    setThumbnailImageFileState(null); // State 초기화\n                }else{\n                    setTempThumbnailImageOnView(imageFile);\n                    setThumbnailImageFileState(imageFile);\n                }\n            }\n        }\n    }\n\n\n    const setTempThumbnailImageOnView = (thumbImageFile: File) =>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                setTempThumbnailImagePathState(e.target.result.toString());\n            }\n        }\n        reader.readAsDataURL(thumbImageFile);\n    }\n\n    const verifyImageType = (image: string) =>{\n        const types = ['image/jpeg', 'image/png', 'image/jpg'];\n        if(types.indexOf(image) === -1){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    const removeThumbnailImage = () =>{\n        setTempThumbnailImagePathState('');\n        setThumbnailImageFileState(null);   \n        setImageState({\n            ...imageState,\n            thumbnailImage: []\n        });   \n    }\n\n    \n\n\n\n\n    const openFileInput = ()=>{\n\n        setInputTagCountState(inputTagCountState + 1);\n        setTimeout(()=>{\n            document.querySelector<HTMLInputElement>(`.decriptionInputFileTag-${inputTagCountState+1}`)?.click();\n        }, 10)\n        \n\n        // iframeRef.current?.contentDocument?.write(\"<img width='100%' height='300px'/>\");\n    }\n\n    const setDescriptionImageFile = (e: React.ChangeEvent<HTMLInputElement>) =>{\n\n        // console.log('e', e);\n\n        if(e.currentTarget.files){\n            const imageFile = e.currentTarget.files[0];\n\n            if(imageFile){\n                if(verifyImageType(imageFile.type) === false){\n                    onOpenConfirmModal({\n                        status: true,\n                        title: '이미지 오류',\n                        desc: 'jpeg, png, jpg 파일만 가능합니다.',\n                        confirm: {\n                            isShow: false\n                        }\n                    });\n                    if(inputTagCountState !== 0){\n                        setInputTagCountState(inputTagCountState-1);\n                    }\n                    e.currentTarget.value = \"\"; // Input File 초기화\n                }else{\n                    setTempDescriptImageOnTextEditor(imageFile);\n\n                    if(descriptionImageFilesState === null){\n                        setDescriptionImageFilesState([imageFile]);\n                    }else{\n                        setDescriptionImageFilesState(descriptionImageFilesState.concat(imageFile));\n                    }\n                }   \n            }\n\n        }\n    \n    }\n\n    const setTempDescriptImageOnTextEditor = (descriptionImageFile: File)=>{\n        const reader = new FileReader();\n        reader.onload = function(e){\n            if(e.target?.result){\n                const imageTag = `<img width='100%' height='auto' class=\".decriptionImgTag-${inputTagCountState}\" src=\"${e.target.result.toString()}\" />`;\n                iframeRef.current?.contentDocument?.execCommand('InsertHTML', false, imageTag);\n            }\n        }\n        reader.readAsDataURL(descriptionImageFile);\n\n        focusOnTextEditor();\n    }\n\n    return (\n        <main className=\"bb-board-write__main\">\n            <section className=\"bb-board-write__form-section\">\n                <form className=\"bb-board-write__form\" onSubmit={onSubmit}>\n\n                {[...Array(inputTagCountState)].map((v, key) => <input key={key} className={`decriptionInputFileTag-${key+1}`} type=\"file\" onChange={setDescriptionImageFile} />)}\n\n                <input className=\"bb-board-write__title\" ref={titleInputRef} placeholder=\"제목을 입력해주세요.\" type=\"text\" name=\"title\" value={titleState} onChange={setTitleForOnChange}/>\n                {/* <input className=\"bb-board-write__title--sub\" placeholder=\"소제목을 입력해주세요.\" type=\"text\" name=\"subTitle\" value={boardTitle?.subTitle} onChange={setTitleForOnChange}/> */}\n                <div className=\"bb-board-write__tags-wrapper\">\n                    <span onClick={setTagsData}>개발</span>\n                    <span onClick={setTagsData}>공부</span>\n                    <span onClick={setTagsData}>생각</span>\n                </div>\n                <div className=\"bb-board-write__editor-wrapper\">\n                    <ul className=\"bb-board-write__editor-options\" ref={optionsRef}>\n                        <li onClick={toggleFontSizeWindow}>\n                            <VscTextSize />\n                            <ul className=\"bb-board-write__editor-font-box\" ref={fontSizeRef}>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '1')}>10px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '2')}>13px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '3')}>16px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '4')}>18px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '5')}>24px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '6')}>32px</li>\n                                <li onClick={(e) => sendOptionToTextEditor('fontSize', '7')}>48px</li>\n                            </ul>\n                        </li>\n                        <li data-cmd=\"bold\" onClick={(e) => sendOptionToTextEditor('bold', '', e)}><BsTypeBold /></li>\n                        <li data-cmd=\"italic\" onClick={(e) => sendOptionToTextEditor('italic', '', e)}><BsTypeItalic /></li>\n                        <li data-cmd=\"underline\" onClick={(e) => sendOptionToTextEditor('underline', '', e)}><BsTypeUnderline /></li>\n                        <li data-cmd=\"strikethrough\" onClick={(e) => sendOptionToTextEditor('strikethrough', '', e)}><BsTypeStrikethrough /></li>\n                        <li data-cmd=\"justifycenter\" onClick={(e) => sendOptionToTextEditor('justifycenter', '', e)}><BsTextCenter /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertunorderedlist', '')}><BsListUl /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('insertorderedlist', '')}><BsListOl /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('indent', '')}><BsTextIndentLeft /></li>\n                        <li className=\"small-hidden\" onClick={(e) => sendOptionToTextEditor('outdent', '')}><BsTextIndentRight /></li>\n                        <li onClick={openFileInput}><BsCardImage /></li>\n                    </ul>\n                    <iframe className=\"bb-board-wrtie__editor\" name=\"boadeditrot\" ref={iframeRef}></iframe>\n                </div>\n                <div className={`bb-board-write__image-tiles ${tempThumbnailImagePathState !== '' && 'on'}`}>\n                    <span style={{backgroundImage: `url(${tempThumbnailImagePathState})`}} onClick={removeThumbnailImage}><BsX /></span>\n                </div>\n                <div className=\"bb-board-write__image-upload-btn\">\n                    <input type=\"file\" ref={thumbImageRef} onChange={setThumbnailImageFile} />\n                    <button type=\"button\" onClick={()=> thumbImageRef.current?.click()}>썸네일 이미지 업로드</button>\n                </div>\n                <div className=\"bb-board-write__buttons\">\n                    <button type=\"button\" onClick={() => history.push('/board')}>취소</button>\n                    <button type=\"submit\">완료</button>\n                </div>\n                </form>\n            </section>\n        </main>\n    )\n}\n\nexport default BoardWrite;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport {\n  Header,\n  Footer,\n  Modal,\n  BoardHome,\n  BoardView,\n  BoardWrite\n} from './components';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"bb-body\">\n      <BrowserRouter>\n        <Header />\n        <Modal />\n        <Route exact path=\"/\" component={BoardHome} />\n        <Switch>\n          <Route path=\"/board/write\" component={BoardWrite} />\n          <Route path=\"/board/view\" component={BoardView} />\n          <Route path=\"/board\" component={BoardHome} />\n        </Switch>\n        <Footer />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\nimport modal from './modal';\n\nconst rootReducer = combineReducers({\n    modal\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}